/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */
// @ts-nocheck

import { api } from '@shared/api/base';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
};

export type ActivitiesConnection = {
  __typename?: 'ActivitiesConnection';
  edges: Array<ActivityEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type ActivityEdge = {
  __typename?: 'ActivityEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The activity node */
  node: ActivityNode;
};

export type ActivityFileNode = {
  __typename?: 'ActivityFileNode';
  author?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  mime?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  size: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type ActivityNode = {
  __typename?: 'ActivityNode';
  active: Scalars['Boolean']['output'];
  activityData: Scalars['String']['output'];
  activityId: Scalars['String']['output'];
  activityType: Scalars['String']['output'];
  assignee?: Maybe<UserNode>;
  author?: Maybe<UserNode>;
  body: Scalars['String']['output'];
  category?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  creationOrder: Scalars['Int']['output'];
  entityId?: Maybe<Scalars['String']['output']>;
  entityName?: Maybe<Scalars['String']['output']>;
  entityPath?: Maybe<Scalars['String']['output']>;
  entityType: Scalars['String']['output'];
  files: Array<ActivityFileNode>;
  origin?: Maybe<ActivityOriginNode>;
  parents: Array<ActivityOriginNode>;
  projectName: Scalars['String']['output'];
  reactions: Array<ActivityReactionNode>;
  read: Scalars['Boolean']['output'];
  referenceData: Scalars['String']['output'];
  referenceId: Scalars['String']['output'];
  referenceType: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  version?: Maybe<VersionNode>;
};

export type ActivityOriginNode = {
  __typename?: 'ActivityOriginNode';
  id: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  link: Scalars['String']['output'];
  name: Scalars['String']['output'];
  subtype?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type ActivityReactionNode = {
  __typename?: 'ActivityReactionNode';
  fullName?: Maybe<Scalars['String']['output']>;
  reaction: Scalars['String']['output'];
  timestamp: Scalars['DateTime']['output'];
  userName: Scalars['String']['output'];
};

export type AttributeFilterInput = {
  name: Scalars['String']['input'];
  values: Array<Scalars['String']['input']>;
};

export type BaseNode = {
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  projectName: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};


export type BaseNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type BaseNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type EntityListEdge = {
  __typename?: 'EntityListEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The entity list node */
  node: EntityListNode;
};

export type EntityListItemEdge = {
  __typename?: 'EntityListItemEdge';
  Entity?: Maybe<BaseNode>;
  Forbidden: Scalars['Boolean']['output'];
  allAttrib: Scalars['String']['output'];
  attrib: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  cursor?: Maybe<Scalars['String']['output']>;
  data: Scalars['String']['output'];
  entityId: Scalars['String']['output'];
  entityType: Scalars['String']['output'];
  folderPath: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** Item node */
  node?: Maybe<BaseNode>;
  ownAttrib: Array<Scalars['String']['output']>;
  position: Scalars['Int']['output'];
  projectName: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type EntityListItemsConnection = {
  __typename?: 'EntityListItemsConnection';
  edges: Array<EntityListItemEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type EntityListNode = {
  __typename?: 'EntityListNode';
  active: Scalars['Boolean']['output'];
  attributes: Scalars['String']['output'];
  count: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  data: Scalars['String']['output'];
  entityListType: Scalars['String']['output'];
  entityType: Scalars['String']['output'];
  id: Scalars['String']['output'];
  items: EntityListItemsConnection;
  label: Scalars['String']['output'];
  owner?: Maybe<Scalars['String']['output']>;
  projectName: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};


export type EntityListNodeItemsArgs = {
  accessibleOnly?: Scalars['Boolean']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
};

export type EntityListsConnection = {
  __typename?: 'EntityListsConnection';
  edges: Array<EntityListEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type EventEdge = {
  __typename?: 'EventEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Event node */
  node: EventNode;
};

export type EventNode = {
  __typename?: 'EventNode';
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  dependsOn?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  hash: Scalars['String']['output'];
  id: Scalars['String']['output'];
  project?: Maybe<Scalars['String']['output']>;
  retries: Scalars['Int']['output'];
  sender?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  summary: Scalars['String']['output'];
  topic: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  user?: Maybe<Scalars['String']['output']>;
};

export type EventsConnection = {
  __typename?: 'EventsConnection';
  edges: Array<EventEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type FileNode = {
  __typename?: 'FileNode';
  hash?: Maybe<Scalars['String']['output']>;
  hashType: Scalars['String']['output'];
  id: Scalars['String']['output'];
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
  size: Scalars['String']['output'];
};

export type FolderAttribType = {
  __typename?: 'FolderAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  /** Deadline date and time */
  endDate?: Maybe<Scalars['DateTime']['output']>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  priority?: Maybe<Scalars['String']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  /** Date and time when the project or task or asset was started */
  startDate?: Maybe<Scalars['DateTime']['output']>;
};

export type FolderEdge = {
  __typename?: 'FolderEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The folder node */
  node: FolderNode;
};

export type FolderNode = BaseNode & {
  __typename?: 'FolderNode';
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: FolderAttribType;
  childCount: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  folderType: Scalars['String']['output'];
  hasChildren: Scalars['Boolean']['output'];
  hasProducts: Scalars['Boolean']['output'];
  hasReviewables: Scalars['Boolean']['output'];
  hasTasks: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  links: LinksConnection;
  name: Scalars['String']['output'];
  ownAttrib: Array<Scalars['String']['output']>;
  parent?: Maybe<FolderNode>;
  parentId?: Maybe<Scalars['String']['output']>;
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  productCount: Scalars['Int']['output'];
  /** Return a list of products. */
  products: ProductsConnection;
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  taskCount: Scalars['Int']['output'];
  /** Return a list of tasks. */
  tasks: TasksConnection;
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};


export type FolderNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type FolderNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type FolderNodeProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderIds?: InputMaybe<Array<Scalars['String']['input']>>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  namesCi?: InputMaybe<Array<Scalars['String']['input']>>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  productTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type FolderNodeTasksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  assignees?: InputMaybe<Array<Scalars['String']['input']>>;
  assigneesAny?: InputMaybe<Array<Scalars['String']['input']>>;
  attributes?: InputMaybe<Array<AttributeFilterInput>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderIds?: InputMaybe<Array<Scalars['String']['input']>>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  includeFolderChildren?: Scalars['Boolean']['input'];
  last?: InputMaybe<Scalars['Int']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  tagsAny?: InputMaybe<Array<Scalars['String']['input']>>;
  taskTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type FolderType = {
  __typename?: 'FolderType';
  icon?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  shortName?: Maybe<Scalars['String']['output']>;
};

export type FoldersConnection = {
  __typename?: 'FoldersConnection';
  edges: Array<FolderEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export enum HasLinksFilter {
  Any = 'ANY',
  Both = 'BOTH',
  In = 'IN',
  None = 'NONE',
  Out = 'OUT'
}

export type KanbanConnection = {
  __typename?: 'KanbanConnection';
  edges: Array<KanbanEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type KanbanEdge = {
  __typename?: 'KanbanEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The kanban node */
  node: KanbanNode;
};

export type KanbanNode = {
  __typename?: 'KanbanNode';
  assignees: Array<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  dueDate?: Maybe<Scalars['DateTime']['output']>;
  folderId: Scalars['String']['output'];
  folderLabel?: Maybe<Scalars['String']['output']>;
  folderName: Scalars['String']['output'];
  folderPath: Scalars['String']['output'];
  hasReviewables: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  lastVersionWithReviewableProductId?: Maybe<Scalars['String']['output']>;
  lastVersionWithReviewableVersionId?: Maybe<Scalars['String']['output']>;
  lastVersionWithThumbnailId?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  priority?: Maybe<Scalars['String']['output']>;
  projectCode: Scalars['String']['output'];
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  taskType: Scalars['String']['output'];
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type LinkEdge = {
  __typename?: 'LinkEdge';
  author?: Maybe<Scalars['String']['output']>;
  cursor?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  direction: Scalars['String']['output'];
  entityId: Scalars['String']['output'];
  entityType: Scalars['String']['output'];
  id: Scalars['String']['output'];
  linkType: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  /** Linked node */
  node: BaseNode;
  projectName: Scalars['String']['output'];
};

export type LinkType = {
  __typename?: 'LinkType';
  color?: Maybe<Scalars['String']['output']>;
  inputType: Scalars['String']['output'];
  linkType: Scalars['String']['output'];
  name: Scalars['String']['output'];
  outputType: Scalars['String']['output'];
  style: Scalars['String']['output'];
};

export type LinksConnection = {
  __typename?: 'LinksConnection';
  edges: Array<LinkEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  endCursor?: Maybe<Scalars['String']['output']>;
  hasNextPage: Scalars['Boolean']['output'];
  hasPreviousPage: Scalars['Boolean']['output'];
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type ProductAttribType = {
  __typename?: 'ProductAttribType';
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  productGroup?: Maybe<Scalars['String']['output']>;
};

export type ProductEdge = {
  __typename?: 'ProductEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Product node */
  node: ProductNode;
};

export type ProductNode = BaseNode & {
  __typename?: 'ProductNode';
  Folder?: Maybe<FolderNode>;
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: ProductAttribType;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  /** Parent folder of the product */
  folder: FolderNode;
  folderId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** Last version of the product */
  latestVersion?: Maybe<VersionNode>;
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  productType: Scalars['String']['output'];
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  /** Simple (id /version) list of versions in the product */
  versionList: Array<VersionListItem>;
  /** Return a list of versions. */
  versions: VersionsConnection;
};


export type ProductNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProductNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProductNodeVersionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  authors?: InputMaybe<Array<Scalars['String']['input']>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  heroOnly?: Scalars['Boolean']['input'];
  heroOrLatestOnly?: Scalars['Boolean']['input'];
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  latestOnly?: Scalars['Boolean']['input'];
  productIds?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
  version?: InputMaybe<Scalars['Int']['input']>;
  versions?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type ProductType = {
  __typename?: 'ProductType';
  color?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

export type ProductsConnection = {
  __typename?: 'ProductsConnection';
  edges: Array<ProductEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type ProjectAttribType = {
  __typename?: 'ProjectAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  /** Deadline date and time */
  endDate?: Maybe<Scalars['DateTime']['output']>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  priority?: Maybe<Scalars['String']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  /** Date and time when the project or task or asset was started */
  startDate?: Maybe<Scalars['DateTime']['output']>;
};

export type ProjectBundleType = {
  __typename?: 'ProjectBundleType';
  production?: Maybe<Scalars['String']['output']>;
  staging?: Maybe<Scalars['String']['output']>;
};

export type ProjectEdge = {
  __typename?: 'ProjectEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The project node */
  node: ProjectNode;
};

export type ProjectNode = {
  __typename?: 'ProjectNode';
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: ProjectAttribType;
  bundle: ProjectBundleType;
  code: Scalars['String']['output'];
  config?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  /** Return a folder node based on its ID */
  entityList: EntityListNode;
  entityLists: EntityListsConnection;
  /** Return a folder node based on its ID */
  folder?: Maybe<FolderNode>;
  /** List of project's folder types */
  folderTypes: Array<FolderType>;
  /** Return a list of folders. */
  folders: FoldersConnection;
  library: Scalars['Boolean']['output'];
  /** List of project's link types */
  linkTypes: Array<LinkType>;
  name: Scalars['String']['output'];
  /** Return a representation node based on its ID */
  product?: Maybe<ProductNode>;
  /** List of project's product types */
  productTypes: Array<ProductType>;
  /** Return a list of products. */
  products: ProductsConnection;
  projectName: Scalars['String']['output'];
  /** Return a representation node based on its ID */
  representation?: Maybe<RepresentationNode>;
  /** Return a list of representations. */
  representations: RepresentationsConnection;
  /** List of project's statuses */
  statuses: Array<Status>;
  /** List of tags in the project */
  tags: Array<Tag>;
  /** Return a task node based on its ID */
  task?: Maybe<TaskNode>;
  /** List of project's task types */
  taskTypes: Array<TaskType>;
  /** Return a list of tasks. */
  tasks: TasksConnection;
  thumbnail?: Maybe<ThumbnailInfo>;
  updatedAt: Scalars['DateTime']['output'];
  /** List of tags used in the project */
  usedTags: Array<Scalars['String']['output']>;
  /** Return a task node based on its ID */
  version?: Maybe<VersionNode>;
  /** Return a list of versions. */
  versions: VersionsConnection;
  /** Return a task node based on its ID */
  workfile?: Maybe<WorkfileNode>;
  /** Return a list of workfiles. */
  workfiles: WorkfilesConnection;
};


export type ProjectNodeActivitiesArgs = {
  activityIds?: InputMaybe<Array<Scalars['String']['input']>>;
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  changedAfter?: InputMaybe<Scalars['String']['input']>;
  changedBefore?: InputMaybe<Scalars['String']['input']>;
  entityIds?: InputMaybe<Array<Scalars['String']['input']>>;
  entityNames?: InputMaybe<Array<Scalars['String']['input']>>;
  entityType?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeEntityListArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeEntityListsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
};


export type ProjectNodeFolderArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeFolderTypesArgs = {
  activeOnly?: Scalars['Boolean']['input'];
};


export type ProjectNodeFoldersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  assignees?: InputMaybe<Array<Scalars['String']['input']>>;
  attributes?: InputMaybe<Array<AttributeFilterInput>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  hasChildren?: InputMaybe<Scalars['Boolean']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  hasProducts?: InputMaybe<Scalars['Boolean']['input']>;
  hasTasks?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  parentId?: InputMaybe<Scalars['String']['input']>;
  parentIds?: InputMaybe<Array<Scalars['String']['input']>>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  paths?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeLinkTypesArgs = {
  activeOnly?: Scalars['Boolean']['input'];
};


export type ProjectNodeProductArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderIds?: InputMaybe<Array<Scalars['String']['input']>>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  namesCi?: InputMaybe<Array<Scalars['String']['input']>>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  productTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeRepresentationArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeRepresentationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  versionIds?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeTaskArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeTaskTypesArgs = {
  activeOnly?: Scalars['Boolean']['input'];
};


export type ProjectNodeTasksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  assignees?: InputMaybe<Array<Scalars['String']['input']>>;
  assigneesAny?: InputMaybe<Array<Scalars['String']['input']>>;
  attributes?: InputMaybe<Array<AttributeFilterInput>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderIds?: InputMaybe<Array<Scalars['String']['input']>>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  includeFolderChildren?: Scalars['Boolean']['input'];
  last?: InputMaybe<Scalars['Int']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  tagsAny?: InputMaybe<Array<Scalars['String']['input']>>;
  taskTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeVersionArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeVersionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  authors?: InputMaybe<Array<Scalars['String']['input']>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  heroOnly?: Scalars['Boolean']['input'];
  heroOrLatestOnly?: Scalars['Boolean']['input'];
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  latestOnly?: Scalars['Boolean']['input'];
  productIds?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
  version?: InputMaybe<Scalars['Int']['input']>;
  versions?: InputMaybe<Array<Scalars['Int']['input']>>;
};


export type ProjectNodeWorkfileArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeWorkfilesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  paths?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ProjectsConnection = {
  __typename?: 'ProjectsConnection';
  edges: Array<ProjectEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  /** Get a list of recorded events */
  events: EventsConnection;
  /** Get user inbox */
  inbox: ActivitiesConnection;
  /** Get kanban board */
  kanban: KanbanConnection;
  /** Current user */
  me: UserNode;
  /** Studio-wide product type configuration */
  productTypes: Array<ProductType>;
  /** Get a project by name */
  project: ProjectNode;
  /** Get a list of projects */
  projects: ProjectsConnection;
  /** Get a user by name */
  user: UserNode;
  /** Get a list of users */
  users: UsersConnection;
};


export type QueryEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasChildren?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  includeLogs?: Scalars['Boolean']['input'];
  last?: InputMaybe<Scalars['Int']['input']>;
  newerThan?: InputMaybe<Scalars['String']['input']>;
  olderThan?: InputMaybe<Scalars['String']['input']>;
  projects?: InputMaybe<Array<Scalars['String']['input']>>;
  states?: InputMaybe<Array<Scalars['String']['input']>>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  topics?: InputMaybe<Array<Scalars['String']['input']>>;
  users?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type QueryInboxArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  showActiveMessages?: InputMaybe<Scalars['Boolean']['input']>;
  showActiveProjects?: InputMaybe<Scalars['Boolean']['input']>;
  showImportantMessages?: InputMaybe<Scalars['Boolean']['input']>;
  showUnreadMessages?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryKanbanArgs = {
  assigneesAny?: InputMaybe<Array<Scalars['String']['input']>>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  projects?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type QueryProjectArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserArgs = {
  name: Scalars['String']['input'];
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  emails?: InputMaybe<Array<Scalars['String']['input']>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  projectName?: InputMaybe<Scalars['String']['input']>;
  projects?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type RepresentationAttribType = {
  __typename?: 'RepresentationAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  extension?: Maybe<Scalars['String']['output']>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  template?: Maybe<Scalars['String']['output']>;
};

export type RepresentationEdge = {
  __typename?: 'RepresentationEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Representation node */
  node: RepresentationNode;
};

export type RepresentationNode = BaseNode & {
  __typename?: 'RepresentationNode';
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: RepresentationAttribType;
  /** JSON serialized context data */
  context?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  /** Number of files of the representation */
  fileCount: Scalars['Int']['output'];
  /** Files in the representation */
  files: Array<FileNode>;
  id: Scalars['String']['output'];
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  traits?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  /** Parent version of the representation */
  version: VersionNode;
  versionId: Scalars['String']['output'];
};


export type RepresentationNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type RepresentationNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type RepresentationsConnection = {
  __typename?: 'RepresentationsConnection';
  edges: Array<RepresentationEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type Status = {
  __typename?: 'Status';
  color?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  scope?: Maybe<Array<Scalars['String']['output']>>;
  shortName?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
};

export type Tag = {
  __typename?: 'Tag';
  color?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

export type TaskAttribType = {
  __typename?: 'TaskAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  /** Deadline date and time */
  endDate?: Maybe<Scalars['DateTime']['output']>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  priority?: Maybe<Scalars['String']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  /** Date and time when the project or task or asset was started */
  startDate?: Maybe<Scalars['DateTime']['output']>;
};

export type TaskEdge = {
  __typename?: 'TaskEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The task node */
  node: TaskNode;
};

export type TaskNode = BaseNode & {
  __typename?: 'TaskNode';
  Folder?: Maybe<FolderNode>;
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  assignees: Array<Scalars['String']['output']>;
  attrib: TaskAttribType;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  /** Parent folder of the task */
  folder: FolderNode;
  folderId: Scalars['String']['output'];
  hasReviewables: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  links: LinksConnection;
  name: Scalars['String']['output'];
  ownAttrib: Array<Scalars['String']['output']>;
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  taskType: Scalars['String']['output'];
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  /** Return a list of versions. */
  versions: VersionsConnection;
  /** Return a list of workfiles. */
  workfiles: WorkfilesConnection;
};


export type TaskNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type TaskNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type TaskNodeVersionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  authors?: InputMaybe<Array<Scalars['String']['input']>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  heroOnly?: Scalars['Boolean']['input'];
  heroOrLatestOnly?: Scalars['Boolean']['input'];
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  latestOnly?: Scalars['Boolean']['input'];
  productIds?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
  version?: InputMaybe<Scalars['Int']['input']>;
  versions?: InputMaybe<Array<Scalars['Int']['input']>>;
};


export type TaskNodeWorkfilesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  paths?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type TaskType = {
  __typename?: 'TaskType';
  color?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  shortName?: Maybe<Scalars['String']['output']>;
};

export type TasksConnection = {
  __typename?: 'TasksConnection';
  edges: Array<TaskEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type ThumbnailInfo = {
  __typename?: 'ThumbnailInfo';
  id: Scalars['String']['output'];
  relation?: Maybe<Scalars['String']['output']>;
  sourceEntityId?: Maybe<Scalars['String']['output']>;
  sourceEntityType?: Maybe<Scalars['String']['output']>;
};

export type UserAttribType = {
  __typename?: 'UserAttribType';
  avatarUrl?: Maybe<Scalars['String']['output']>;
  developerMode?: Maybe<Scalars['Boolean']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  fullName?: Maybe<Scalars['String']['output']>;
};

export type UserEdge = {
  __typename?: 'UserEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The user node */
  node: UserNode;
};

export type UserNode = {
  __typename?: 'UserNode';
  accessGroups: Scalars['String']['output'];
  active: Scalars['Boolean']['output'];
  allAttrib: Scalars['String']['output'];
  apiKeyPreview?: Maybe<Scalars['String']['output']>;
  attrib: UserAttribType;
  createdAt: Scalars['DateTime']['output'];
  defaultAccessGroups: Array<Scalars['String']['output']>;
  deleted: Scalars['Boolean']['output'];
  disablePasswordLogin: Scalars['Boolean']['output'];
  hasPassword: Scalars['Boolean']['output'];
  isAdmin: Scalars['Boolean']['output'];
  isDeveloper: Scalars['Boolean']['output'];
  isGuest: Scalars['Boolean']['output'];
  isManager: Scalars['Boolean']['output'];
  isService: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  tasks: TasksConnection;
  updatedAt: Scalars['DateTime']['output'];
  userPool?: Maybe<Scalars['String']['output']>;
};


export type UserNodeTasksArgs = {
  projectName: Scalars['String']['input'];
};

export type UsersConnection = {
  __typename?: 'UsersConnection';
  edges: Array<UserEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type VersionAttribType = {
  __typename?: 'VersionAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  colorSpace?: Maybe<Scalars['String']['output']>;
  comment?: Maybe<Scalars['String']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  families?: Maybe<Array<Scalars['String']['output']>>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  intent?: Maybe<Scalars['String']['output']>;
  machine?: Maybe<Scalars['String']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  site?: Maybe<Scalars['String']['output']>;
  source?: Maybe<Scalars['String']['output']>;
};

export type VersionEdge = {
  __typename?: 'VersionEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Version node */
  node: VersionNode;
};

export type VersionListItem = {
  __typename?: 'VersionListItem';
  id: Scalars['String']['output'];
  /** Version name */
  name: Scalars['String']['output'];
  version: Scalars['Int']['output'];
};

export type VersionNode = BaseNode & {
  __typename?: 'VersionNode';
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: VersionAttribType;
  author?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  hasReviewables: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  /** Parent product of the version */
  product: ProductNode;
  productId: Scalars['String']['output'];
  projectName: Scalars['String']['output'];
  /** Return a list of representations. */
  representations: RepresentationsConnection;
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  /** Task */
  task?: Maybe<TaskNode>;
  taskId?: Maybe<Scalars['String']['output']>;
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  version: Scalars['Int']['output'];
};


export type VersionNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type VersionNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type VersionNodeRepresentationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  versionIds?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type VersionsConnection = {
  __typename?: 'VersionsConnection';
  edges: Array<VersionEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type WorkfileAttribType = {
  __typename?: 'WorkfileAttribType';
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  extension?: Maybe<Scalars['String']['output']>;
};

export type WorkfileEdge = {
  __typename?: 'WorkfileEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Workfile node */
  node: WorkfileNode;
};

export type WorkfileNode = BaseNode & {
  __typename?: 'WorkfileNode';
  Parents?: Maybe<Array<Scalars['String']['output']>>;
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: WorkfileAttribType;
  createdAt: Scalars['DateTime']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  data?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  /** Parent task of the workfile */
  task: TaskNode;
  taskId?: Maybe<Scalars['String']['output']>;
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};


export type WorkfileNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type WorkfileNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type WorkfilesConnection = {
  __typename?: 'WorkfilesConnection';
  edges: Array<WorkfileEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type GetFolderLinkDataQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  folderId: Scalars['String']['input'];
}>;


export type GetFolderLinkDataQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', folder?: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | null } };

export type GetProductLinkDataQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  productId: Scalars['String']['input'];
}>;


export type GetProductLinkDataQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', product?: { __typename: 'ProductNode', id: string, name: string, parents: Array<string> } | null } };

export type GetRepresentationLinkDataQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  representationId: Scalars['String']['input'];
}>;


export type GetRepresentationLinkDataQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', representation?: { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } | null } };

export type GetTaskLinkDataQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  taskId: Scalars['String']['input'];
}>;


export type GetTaskLinkDataQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', task?: { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | null } };

export type GetVersionLinkDataQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  versionId: Scalars['String']['input'];
}>;


export type GetVersionLinkDataQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', version?: { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } | null } };

export type GetWorkfileLinkDataQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  workfileId: Scalars['String']['input'];
}>;


export type GetWorkfileLinkDataQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', workfile?: { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } | null } };

export type GetFoldersLinksQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetFoldersLinksQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', folders: { __typename?: 'FoldersConnection', edges: Array<{ __typename?: 'FolderEdge', node: { __typename?: 'FolderNode', id: string, links: { __typename?: 'LinksConnection', edges: Array<{ __typename?: 'LinkEdge', id: string, direction: string, linkType: string, entityType: string, node: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'ProductNode', id: string, name: string, parents: Array<string> } | { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } | { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } | { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } }> } } }> } } };

export type GetProductsLinksQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetProductsLinksQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', products: { __typename?: 'ProductsConnection', edges: Array<{ __typename?: 'ProductEdge', node: { __typename?: 'ProductNode', id: string, links: { __typename?: 'LinksConnection', edges: Array<{ __typename?: 'LinkEdge', id: string, direction: string, linkType: string, entityType: string, node: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'ProductNode', id: string, name: string, parents: Array<string> } | { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } | { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } | { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } }> } } }> } } };

export type GetTasksLinksQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetTasksLinksQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', tasks: { __typename?: 'TasksConnection', edges: Array<{ __typename?: 'TaskEdge', node: { __typename?: 'TaskNode', id: string, links: { __typename?: 'LinksConnection', edges: Array<{ __typename?: 'LinkEdge', id: string, direction: string, linkType: string, entityType: string, node: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'ProductNode', id: string, name: string, parents: Array<string> } | { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } | { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } | { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } }> } } }> } } };

export type GetVersionsLinksQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetVersionsLinksQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', versions: { __typename?: 'VersionsConnection', edges: Array<{ __typename?: 'VersionEdge', node: { __typename?: 'VersionNode', id: string, links: { __typename?: 'LinksConnection', edges: Array<{ __typename?: 'LinkEdge', id: string, direction: string, linkType: string, entityType: string, node: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'ProductNode', id: string, name: string, parents: Array<string> } | { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } | { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } | { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } }> } } }> } } };

export type GetWorkfilesLinksQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetWorkfilesLinksQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', workfiles: { __typename?: 'WorkfilesConnection', edges: Array<{ __typename?: 'WorkfileEdge', node: { __typename?: 'WorkfileNode', id: string, links: { __typename?: 'LinksConnection', edges: Array<{ __typename?: 'LinkEdge', id: string, direction: string, linkType: string, entityType: string, node: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'ProductNode', id: string, name: string, parents: Array<string> } | { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } | { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } | { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } }> } } }> } } };

export type GetRepresentationsLinksQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetRepresentationsLinksQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', representations: { __typename?: 'RepresentationsConnection', edges: Array<{ __typename?: 'RepresentationEdge', node: { __typename?: 'RepresentationNode', id: string, links: { __typename?: 'LinksConnection', edges: Array<{ __typename?: 'LinkEdge', id: string, direction: string, linkType: string, entityType: string, node: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'ProductNode', id: string, name: string, parents: Array<string> } | { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } | { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } | { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } }> } } }> } } };

export type GetSearchedFoldersQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetSearchedFoldersQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, folders: { __typename?: 'FoldersConnection', pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean }, edges: Array<{ __typename?: 'FolderEdge', cursor?: string | null, node: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } }> } } };

export type GetSearchedProductsQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
  parentIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetSearchedProductsQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, products: { __typename?: 'ProductsConnection', pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean }, edges: Array<{ __typename?: 'ProductEdge', cursor?: string | null, node: { __typename: 'ProductNode', id: string, name: string, parents: Array<string>, subType: string } }> } } };

export type GetSearchedRepresentationsQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
  parentIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetSearchedRepresentationsQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, representations: { __typename?: 'RepresentationsConnection', pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean }, edges: Array<{ __typename?: 'RepresentationEdge', cursor?: string | null, node: { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } }> } } };

export type GetSearchedTasksQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
  parentIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetSearchedTasksQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, tasks: { __typename?: 'TasksConnection', pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean }, edges: Array<{ __typename?: 'TaskEdge', cursor?: string | null, node: { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } }> } } };

export type GetSearchedVersionsQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
  parentIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetSearchedVersionsQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, versions: { __typename?: 'VersionsConnection', pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean }, edges: Array<{ __typename?: 'VersionEdge', cursor?: string | null, node: { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } }> } } };

export type GetSearchedWorkfilesQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
  parentIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetSearchedWorkfilesQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, workfiles: { __typename?: 'WorkfilesConnection', pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean }, edges: Array<{ __typename?: 'WorkfileEdge', cursor?: string | null, node: { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } }> } } };

export type OverviewEntityLinkFragmentFragment = { __typename?: 'LinkEdge', id: string, direction: string, linkType: string, entityType: string, node: { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'ProductNode', id: string, name: string, parents: Array<string> } | { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> } | { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string } | { __typename: 'VersionNode', id: string, name: string, parents: Array<string> } | { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> } };

type OverviewEntityLinkNodeFragment_FolderNode_Fragment = { __typename: 'FolderNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string };

type OverviewEntityLinkNodeFragment_ProductNode_Fragment = { __typename: 'ProductNode', id: string, name: string, parents: Array<string> };

type OverviewEntityLinkNodeFragment_RepresentationNode_Fragment = { __typename: 'RepresentationNode', id: string, name: string, parents: Array<string> };

type OverviewEntityLinkNodeFragment_TaskNode_Fragment = { __typename: 'TaskNode', label?: string | null, id: string, name: string, parents: Array<string>, subType: string };

type OverviewEntityLinkNodeFragment_VersionNode_Fragment = { __typename: 'VersionNode', id: string, name: string, parents: Array<string> };

type OverviewEntityLinkNodeFragment_WorkfileNode_Fragment = { __typename: 'WorkfileNode', id: string, name: string, parents: Array<string> };

export type OverviewEntityLinkNodeFragmentFragment = OverviewEntityLinkNodeFragment_FolderNode_Fragment | OverviewEntityLinkNodeFragment_ProductNode_Fragment | OverviewEntityLinkNodeFragment_RepresentationNode_Fragment | OverviewEntityLinkNodeFragment_TaskNode_Fragment | OverviewEntityLinkNodeFragment_VersionNode_Fragment | OverviewEntityLinkNodeFragment_WorkfileNode_Fragment;

export const OverviewEntityLinkNodeFragmentFragmentDoc = `
    fragment OverviewEntityLinkNodeFragment on BaseNode {
  __typename
  id
  name
  parents
  ... on TaskNode {
    label
    subType: taskType
  }
  ... on FolderNode {
    label
    subType: folderType
  }
}
    `;
export const OverviewEntityLinkFragmentFragmentDoc = `
    fragment OverviewEntityLinkFragment on LinkEdge {
  id
  direction
  linkType
  entityType
  node {
    ...OverviewEntityLinkNodeFragment
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetFolderLinkDataDocument = `
    query GetFolderLinkData($projectName: String!, $folderId: String!) {
  project(name: $projectName) {
    folder(id: $folderId) {
      ...OverviewEntityLinkNodeFragment
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetProductLinkDataDocument = `
    query GetProductLinkData($projectName: String!, $productId: String!) {
  project(name: $projectName) {
    product(id: $productId) {
      ...OverviewEntityLinkNodeFragment
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetRepresentationLinkDataDocument = `
    query GetRepresentationLinkData($projectName: String!, $representationId: String!) {
  project(name: $projectName) {
    representation(id: $representationId) {
      ...OverviewEntityLinkNodeFragment
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetTaskLinkDataDocument = `
    query GetTaskLinkData($projectName: String!, $taskId: String!) {
  project(name: $projectName) {
    task(id: $taskId) {
      ...OverviewEntityLinkNodeFragment
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetVersionLinkDataDocument = `
    query GetVersionLinkData($projectName: String!, $versionId: String!) {
  project(name: $projectName) {
    version(id: $versionId) {
      ...OverviewEntityLinkNodeFragment
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetWorkfileLinkDataDocument = `
    query GetWorkfileLinkData($projectName: String!, $workfileId: String!) {
  project(name: $projectName) {
    workfile(id: $workfileId) {
      ...OverviewEntityLinkNodeFragment
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetFoldersLinksDocument = `
    query GetFoldersLinks($projectName: String!, $entityIds: [String!]) {
  project(name: $projectName) {
    folders(ids: $entityIds, last: 100) {
      edges {
        node {
          id
          links {
            edges {
              ...OverviewEntityLinkFragment
            }
          }
        }
      }
    }
  }
}
    ${OverviewEntityLinkFragmentFragmentDoc}`;
export const GetProductsLinksDocument = `
    query GetProductsLinks($projectName: String!, $entityIds: [String!]) {
  project(name: $projectName) {
    products(ids: $entityIds, last: 1000) {
      edges {
        node {
          id
          links {
            edges {
              ...OverviewEntityLinkFragment
            }
          }
        }
      }
    }
  }
}
    ${OverviewEntityLinkFragmentFragmentDoc}`;
export const GetTasksLinksDocument = `
    query GetTasksLinks($projectName: String!, $entityIds: [String!]) {
  project(name: $projectName) {
    tasks(ids: $entityIds, last: 1000) {
      edges {
        node {
          id
          links {
            edges {
              ...OverviewEntityLinkFragment
            }
          }
        }
      }
    }
  }
}
    ${OverviewEntityLinkFragmentFragmentDoc}`;
export const GetVersionsLinksDocument = `
    query GetVersionsLinks($projectName: String!, $entityIds: [String!]) {
  project(name: $projectName) {
    versions(ids: $entityIds, last: 1000) {
      edges {
        node {
          id
          links {
            edges {
              ...OverviewEntityLinkFragment
            }
          }
        }
      }
    }
  }
}
    ${OverviewEntityLinkFragmentFragmentDoc}`;
export const GetWorkfilesLinksDocument = `
    query GetWorkfilesLinks($projectName: String!, $entityIds: [String!]) {
  project(name: $projectName) {
    workfiles(ids: $entityIds, last: 1000) {
      edges {
        node {
          id
          links {
            edges {
              ...OverviewEntityLinkFragment
            }
          }
        }
      }
    }
  }
}
    ${OverviewEntityLinkFragmentFragmentDoc}`;
export const GetRepresentationsLinksDocument = `
    query GetRepresentationsLinks($projectName: String!, $entityIds: [String!]) {
  project(name: $projectName) {
    representations(ids: $entityIds, last: 1000) {
      edges {
        node {
          id
          links {
            edges {
              ...OverviewEntityLinkFragment
            }
          }
        }
      }
    }
  }
}
    ${OverviewEntityLinkFragmentFragmentDoc}`;
export const GetSearchedFoldersDocument = `
    query GetSearchedFolders($projectName: String!, $search: String, $after: String, $first: Int, $before: String, $last: Int) {
  project(name: $projectName) {
    name
    folders(
      search: $search
      after: $after
      first: $first
      before: $before
      last: $last
      sortBy: "name"
    ) {
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          ...OverviewEntityLinkNodeFragment
          subType: folderType
          label
        }
      }
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetSearchedProductsDocument = `
    query GetSearchedProducts($projectName: String!, $search: String, $parentIds: [String!], $after: String, $first: Int, $before: String, $last: Int) {
  project(name: $projectName) {
    name
    products(
      search: $search
      folderIds: $parentIds
      after: $after
      first: $first
      before: $before
      last: $last
      sortBy: "name"
    ) {
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          ...OverviewEntityLinkNodeFragment
          subType: productType
        }
      }
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetSearchedRepresentationsDocument = `
    query GetSearchedRepresentations($projectName: String!, $search: String, $parentIds: [String!], $after: String, $first: Int, $before: String, $last: Int) {
  project(name: $projectName) {
    name
    representations(
      search: $search
      versionIds: $parentIds
      after: $after
      first: $first
      before: $before
      last: $last
    ) {
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          ...OverviewEntityLinkNodeFragment
        }
      }
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetSearchedTasksDocument = `
    query GetSearchedTasks($projectName: String!, $search: String, $parentIds: [String!], $after: String, $first: Int, $before: String, $last: Int) {
  project(name: $projectName) {
    name
    tasks(
      search: $search
      folderIds: $parentIds
      after: $after
      first: $first
      before: $before
      last: $last
      sortBy: "name"
    ) {
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          ...OverviewEntityLinkNodeFragment
          label
          subType: taskType
        }
      }
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetSearchedVersionsDocument = `
    query GetSearchedVersions($projectName: String!, $search: String, $parentIds: [String!], $after: String, $first: Int, $before: String, $last: Int) {
  project(name: $projectName) {
    name
    versions(
      search: $search
      productIds: $parentIds
      after: $after
      first: $first
      before: $before
      last: $last
    ) {
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          ...OverviewEntityLinkNodeFragment
        }
      }
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;
export const GetSearchedWorkfilesDocument = `
    query GetSearchedWorkfiles($projectName: String!, $search: String, $parentIds: [String!], $after: String, $first: Int, $before: String, $last: Int) {
  project(name: $projectName) {
    name
    workfiles(
      search: $search
      taskIds: $parentIds
      after: $after
      first: $first
      before: $before
      last: $last
    ) {
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          ...OverviewEntityLinkNodeFragment
        }
      }
    }
  }
}
    ${OverviewEntityLinkNodeFragmentFragmentDoc}`;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    GetFolderLinkData: build.query<GetFolderLinkDataQuery, GetFolderLinkDataQueryVariables>({
      query: (variables) => ({ document: GetFolderLinkDataDocument, variables })
    }),
    GetProductLinkData: build.query<GetProductLinkDataQuery, GetProductLinkDataQueryVariables>({
      query: (variables) => ({ document: GetProductLinkDataDocument, variables })
    }),
    GetRepresentationLinkData: build.query<GetRepresentationLinkDataQuery, GetRepresentationLinkDataQueryVariables>({
      query: (variables) => ({ document: GetRepresentationLinkDataDocument, variables })
    }),
    GetTaskLinkData: build.query<GetTaskLinkDataQuery, GetTaskLinkDataQueryVariables>({
      query: (variables) => ({ document: GetTaskLinkDataDocument, variables })
    }),
    GetVersionLinkData: build.query<GetVersionLinkDataQuery, GetVersionLinkDataQueryVariables>({
      query: (variables) => ({ document: GetVersionLinkDataDocument, variables })
    }),
    GetWorkfileLinkData: build.query<GetWorkfileLinkDataQuery, GetWorkfileLinkDataQueryVariables>({
      query: (variables) => ({ document: GetWorkfileLinkDataDocument, variables })
    }),
    GetFoldersLinks: build.query<GetFoldersLinksQuery, GetFoldersLinksQueryVariables>({
      query: (variables) => ({ document: GetFoldersLinksDocument, variables })
    }),
    GetProductsLinks: build.query<GetProductsLinksQuery, GetProductsLinksQueryVariables>({
      query: (variables) => ({ document: GetProductsLinksDocument, variables })
    }),
    GetTasksLinks: build.query<GetTasksLinksQuery, GetTasksLinksQueryVariables>({
      query: (variables) => ({ document: GetTasksLinksDocument, variables })
    }),
    GetVersionsLinks: build.query<GetVersionsLinksQuery, GetVersionsLinksQueryVariables>({
      query: (variables) => ({ document: GetVersionsLinksDocument, variables })
    }),
    GetWorkfilesLinks: build.query<GetWorkfilesLinksQuery, GetWorkfilesLinksQueryVariables>({
      query: (variables) => ({ document: GetWorkfilesLinksDocument, variables })
    }),
    GetRepresentationsLinks: build.query<GetRepresentationsLinksQuery, GetRepresentationsLinksQueryVariables>({
      query: (variables) => ({ document: GetRepresentationsLinksDocument, variables })
    }),
    GetSearchedFolders: build.query<GetSearchedFoldersQuery, GetSearchedFoldersQueryVariables>({
      query: (variables) => ({ document: GetSearchedFoldersDocument, variables })
    }),
    GetSearchedProducts: build.query<GetSearchedProductsQuery, GetSearchedProductsQueryVariables>({
      query: (variables) => ({ document: GetSearchedProductsDocument, variables })
    }),
    GetSearchedRepresentations: build.query<GetSearchedRepresentationsQuery, GetSearchedRepresentationsQueryVariables>({
      query: (variables) => ({ document: GetSearchedRepresentationsDocument, variables })
    }),
    GetSearchedTasks: build.query<GetSearchedTasksQuery, GetSearchedTasksQueryVariables>({
      query: (variables) => ({ document: GetSearchedTasksDocument, variables })
    }),
    GetSearchedVersions: build.query<GetSearchedVersionsQuery, GetSearchedVersionsQueryVariables>({
      query: (variables) => ({ document: GetSearchedVersionsDocument, variables })
    }),
    GetSearchedWorkfiles: build.query<GetSearchedWorkfilesQuery, GetSearchedWorkfilesQueryVariables>({
      query: (variables) => ({ document: GetSearchedWorkfilesDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };


