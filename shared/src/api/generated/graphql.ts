/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */
// @ts-nocheck

import { api } from '@shared/api/base';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
};

export type ActivitiesConnection = {
  __typename?: 'ActivitiesConnection';
  edges: Array<ActivityEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type ActivityEdge = {
  __typename?: 'ActivityEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The activity node */
  node: ActivityNode;
};

export type ActivityFileNode = {
  __typename?: 'ActivityFileNode';
  author?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  mime?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  size: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type ActivityNode = {
  __typename?: 'ActivityNode';
  active: Scalars['Boolean']['output'];
  activityData: Scalars['String']['output'];
  activityId: Scalars['String']['output'];
  activityType: Scalars['String']['output'];
  assignee?: Maybe<UserNode>;
  author?: Maybe<UserNode>;
  body: Scalars['String']['output'];
  category?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  creationOrder: Scalars['Int']['output'];
  entityId?: Maybe<Scalars['String']['output']>;
  entityName?: Maybe<Scalars['String']['output']>;
  entityPath?: Maybe<Scalars['String']['output']>;
  entityType: Scalars['String']['output'];
  files: Array<ActivityFileNode>;
  origin?: Maybe<ActivityOriginNode>;
  parents: Array<ActivityOriginNode>;
  projectName: Scalars['String']['output'];
  reactions: Array<ActivityReactionNode>;
  read: Scalars['Boolean']['output'];
  referenceData: Scalars['String']['output'];
  referenceId: Scalars['String']['output'];
  referenceType: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  version?: Maybe<VersionNode>;
};

export type ActivityOriginNode = {
  __typename?: 'ActivityOriginNode';
  id: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  link: Scalars['String']['output'];
  name: Scalars['String']['output'];
  subtype?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type ActivityReactionNode = {
  __typename?: 'ActivityReactionNode';
  fullName?: Maybe<Scalars['String']['output']>;
  reaction: Scalars['String']['output'];
  timestamp: Scalars['DateTime']['output'];
  userName: Scalars['String']['output'];
};

export type AttributeFilterInput = {
  name: Scalars['String']['input'];
  values: Array<Scalars['String']['input']>;
};

export type BaseNode = {
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  projectName: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};


export type BaseNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type BaseNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type EntityListEdge = {
  __typename?: 'EntityListEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The entity list node */
  node: EntityListNode;
};

export type EntityListItemEdge = {
  __typename?: 'EntityListItemEdge';
  Entity?: Maybe<BaseNode>;
  Forbidden: Scalars['Boolean']['output'];
  allAttrib: Scalars['String']['output'];
  attrib: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  cursor?: Maybe<Scalars['String']['output']>;
  data: Scalars['String']['output'];
  entityId: Scalars['String']['output'];
  entityType: Scalars['String']['output'];
  folderPath: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** Item node */
  node?: Maybe<BaseNode>;
  ownAttrib: Array<Scalars['String']['output']>;
  position: Scalars['Int']['output'];
  projectName: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type EntityListItemsConnection = {
  __typename?: 'EntityListItemsConnection';
  edges: Array<EntityListItemEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type EntityListNode = {
  __typename?: 'EntityListNode';
  active: Scalars['Boolean']['output'];
  attributes: Scalars['String']['output'];
  count: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  data: Scalars['String']['output'];
  entityListType: Scalars['String']['output'];
  entityType: Scalars['String']['output'];
  id: Scalars['String']['output'];
  items: EntityListItemsConnection;
  label: Scalars['String']['output'];
  owner?: Maybe<Scalars['String']['output']>;
  projectName: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};


export type EntityListNodeItemsArgs = {
  accessibleOnly?: Scalars['Boolean']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
};

export type EntityListsConnection = {
  __typename?: 'EntityListsConnection';
  edges: Array<EntityListEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type EventEdge = {
  __typename?: 'EventEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Event node */
  node: EventNode;
};

export type EventNode = {
  __typename?: 'EventNode';
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  dependsOn?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  hash: Scalars['String']['output'];
  id: Scalars['String']['output'];
  project?: Maybe<Scalars['String']['output']>;
  retries: Scalars['Int']['output'];
  sender?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  summary: Scalars['String']['output'];
  topic: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  user?: Maybe<Scalars['String']['output']>;
};

export type EventsConnection = {
  __typename?: 'EventsConnection';
  edges: Array<EventEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type FileNode = {
  __typename?: 'FileNode';
  hash?: Maybe<Scalars['String']['output']>;
  hashType: Scalars['String']['output'];
  id: Scalars['String']['output'];
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
  size: Scalars['String']['output'];
};

export type FolderAttribType = {
  __typename?: 'FolderAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  /** Deadline date and time */
  endDate?: Maybe<Scalars['DateTime']['output']>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  priority?: Maybe<Scalars['String']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  /** Date and time when the project or task or asset was started */
  startDate?: Maybe<Scalars['DateTime']['output']>;
};

export type FolderEdge = {
  __typename?: 'FolderEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The folder node */
  node: FolderNode;
};

export type FolderNode = BaseNode & {
  __typename?: 'FolderNode';
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: FolderAttribType;
  childCount: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  folderType: Scalars['String']['output'];
  hasChildren: Scalars['Boolean']['output'];
  hasProducts: Scalars['Boolean']['output'];
  hasReviewables: Scalars['Boolean']['output'];
  hasTasks: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  links: LinksConnection;
  name: Scalars['String']['output'];
  ownAttrib: Array<Scalars['String']['output']>;
  parent?: Maybe<FolderNode>;
  parentId?: Maybe<Scalars['String']['output']>;
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  productCount: Scalars['Int']['output'];
  /** Return a list of products. */
  products: ProductsConnection;
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  taskCount: Scalars['Int']['output'];
  /** Return a list of tasks. */
  tasks: TasksConnection;
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};


export type FolderNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type FolderNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type FolderNodeProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderIds?: InputMaybe<Array<Scalars['String']['input']>>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  namesCi?: InputMaybe<Array<Scalars['String']['input']>>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  productTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type FolderNodeTasksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  assignees?: InputMaybe<Array<Scalars['String']['input']>>;
  assigneesAny?: InputMaybe<Array<Scalars['String']['input']>>;
  attributes?: InputMaybe<Array<AttributeFilterInput>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderIds?: InputMaybe<Array<Scalars['String']['input']>>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  includeFolderChildren?: Scalars['Boolean']['input'];
  last?: InputMaybe<Scalars['Int']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  tagsAny?: InputMaybe<Array<Scalars['String']['input']>>;
  taskTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type FolderType = {
  __typename?: 'FolderType';
  icon?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  shortName?: Maybe<Scalars['String']['output']>;
};

export type FoldersConnection = {
  __typename?: 'FoldersConnection';
  edges: Array<FolderEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export enum HasLinksFilter {
  Any = 'ANY',
  Both = 'BOTH',
  In = 'IN',
  None = 'NONE',
  Out = 'OUT'
}

export type KanbanConnection = {
  __typename?: 'KanbanConnection';
  edges: Array<KanbanEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type KanbanEdge = {
  __typename?: 'KanbanEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The kanban node */
  node: KanbanNode;
};

export type KanbanNode = {
  __typename?: 'KanbanNode';
  assignees: Array<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  dueDate?: Maybe<Scalars['DateTime']['output']>;
  folderId: Scalars['String']['output'];
  folderLabel?: Maybe<Scalars['String']['output']>;
  folderName: Scalars['String']['output'];
  folderPath: Scalars['String']['output'];
  hasReviewables: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  lastVersionWithReviewableProductId?: Maybe<Scalars['String']['output']>;
  lastVersionWithReviewableVersionId?: Maybe<Scalars['String']['output']>;
  lastVersionWithThumbnailId?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  priority?: Maybe<Scalars['String']['output']>;
  projectCode: Scalars['String']['output'];
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  taskType: Scalars['String']['output'];
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type LinkEdge = {
  __typename?: 'LinkEdge';
  author?: Maybe<Scalars['String']['output']>;
  cursor?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  direction: Scalars['String']['output'];
  entityId: Scalars['String']['output'];
  entityType: Scalars['String']['output'];
  id: Scalars['String']['output'];
  linkType: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  /** Linked node */
  node: BaseNode;
  projectName: Scalars['String']['output'];
};

export type LinkType = {
  __typename?: 'LinkType';
  color?: Maybe<Scalars['String']['output']>;
  inputType: Scalars['String']['output'];
  linkType: Scalars['String']['output'];
  name: Scalars['String']['output'];
  outputType: Scalars['String']['output'];
  style: Scalars['String']['output'];
};

export type LinksConnection = {
  __typename?: 'LinksConnection';
  edges: Array<LinkEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  endCursor?: Maybe<Scalars['String']['output']>;
  hasNextPage: Scalars['Boolean']['output'];
  hasPreviousPage: Scalars['Boolean']['output'];
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type ProductAttribType = {
  __typename?: 'ProductAttribType';
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  productGroup?: Maybe<Scalars['String']['output']>;
};

export type ProductEdge = {
  __typename?: 'ProductEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Product node */
  node: ProductNode;
};

export type ProductNode = BaseNode & {
  __typename?: 'ProductNode';
  Folder?: Maybe<FolderNode>;
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: ProductAttribType;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  /** Parent folder of the product */
  folder: FolderNode;
  folderId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** Last version of the product */
  latestVersion?: Maybe<VersionNode>;
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  productType: Scalars['String']['output'];
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  /** Simple (id /version) list of versions in the product */
  versionList: Array<VersionListItem>;
  /** Return a list of versions. */
  versions: VersionsConnection;
};


export type ProductNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProductNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProductNodeVersionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  authors?: InputMaybe<Array<Scalars['String']['input']>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  heroOnly?: Scalars['Boolean']['input'];
  heroOrLatestOnly?: Scalars['Boolean']['input'];
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  latestOnly?: Scalars['Boolean']['input'];
  productIds?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
  version?: InputMaybe<Scalars['Int']['input']>;
  versions?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type ProductType = {
  __typename?: 'ProductType';
  color?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

export type ProductsConnection = {
  __typename?: 'ProductsConnection';
  edges: Array<ProductEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type ProjectAttribType = {
  __typename?: 'ProjectAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  /** Deadline date and time */
  endDate?: Maybe<Scalars['DateTime']['output']>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  priority?: Maybe<Scalars['String']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  /** Date and time when the project or task or asset was started */
  startDate?: Maybe<Scalars['DateTime']['output']>;
};

export type ProjectBundleType = {
  __typename?: 'ProjectBundleType';
  production?: Maybe<Scalars['String']['output']>;
  staging?: Maybe<Scalars['String']['output']>;
};

export type ProjectEdge = {
  __typename?: 'ProjectEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The project node */
  node: ProjectNode;
};

export type ProjectNode = {
  __typename?: 'ProjectNode';
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: ProjectAttribType;
  bundle: ProjectBundleType;
  code: Scalars['String']['output'];
  config?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  /** Return a folder node based on its ID */
  entityList: EntityListNode;
  entityLists: EntityListsConnection;
  /** Return a folder node based on its ID */
  folder?: Maybe<FolderNode>;
  /** List of project's folder types */
  folderTypes: Array<FolderType>;
  /** Return a list of folders. */
  folders: FoldersConnection;
  library: Scalars['Boolean']['output'];
  /** List of project's link types */
  linkTypes: Array<LinkType>;
  name: Scalars['String']['output'];
  /** Return a representation node based on its ID */
  product?: Maybe<ProductNode>;
  /** List of project's product types */
  productTypes: Array<ProductType>;
  /** Return a list of products. */
  products: ProductsConnection;
  projectName: Scalars['String']['output'];
  /** Return a representation node based on its ID */
  representation?: Maybe<RepresentationNode>;
  /** Return a list of representations. */
  representations: RepresentationsConnection;
  /** List of project's statuses */
  statuses: Array<Status>;
  /** List of tags in the project */
  tags: Array<Tag>;
  /** Return a task node based on its ID */
  task?: Maybe<TaskNode>;
  /** List of project's task types */
  taskTypes: Array<TaskType>;
  /** Return a list of tasks. */
  tasks: TasksConnection;
  thumbnail?: Maybe<ThumbnailInfo>;
  updatedAt: Scalars['DateTime']['output'];
  /** List of tags used in the project */
  usedTags: Array<Scalars['String']['output']>;
  /** Return a task node based on its ID */
  version?: Maybe<VersionNode>;
  /** Return a list of versions. */
  versions: VersionsConnection;
  /** Return a task node based on its ID */
  workfile?: Maybe<WorkfileNode>;
  /** Return a list of workfiles. */
  workfiles: WorkfilesConnection;
};


export type ProjectNodeActivitiesArgs = {
  activityIds?: InputMaybe<Array<Scalars['String']['input']>>;
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  changedAfter?: InputMaybe<Scalars['String']['input']>;
  changedBefore?: InputMaybe<Scalars['String']['input']>;
  entityIds?: InputMaybe<Array<Scalars['String']['input']>>;
  entityNames?: InputMaybe<Array<Scalars['String']['input']>>;
  entityType?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeEntityListArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeEntityListsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
};


export type ProjectNodeFolderArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeFolderTypesArgs = {
  activeOnly?: Scalars['Boolean']['input'];
};


export type ProjectNodeFoldersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  assignees?: InputMaybe<Array<Scalars['String']['input']>>;
  attributes?: InputMaybe<Array<AttributeFilterInput>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  hasChildren?: InputMaybe<Scalars['Boolean']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  hasProducts?: InputMaybe<Scalars['Boolean']['input']>;
  hasTasks?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  parentId?: InputMaybe<Scalars['String']['input']>;
  parentIds?: InputMaybe<Array<Scalars['String']['input']>>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  paths?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeLinkTypesArgs = {
  activeOnly?: Scalars['Boolean']['input'];
};


export type ProjectNodeProductArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderIds?: InputMaybe<Array<Scalars['String']['input']>>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  namesCi?: InputMaybe<Array<Scalars['String']['input']>>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  productTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeRepresentationArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeRepresentationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  versionIds?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeTaskArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeTaskTypesArgs = {
  activeOnly?: Scalars['Boolean']['input'];
};


export type ProjectNodeTasksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  assignees?: InputMaybe<Array<Scalars['String']['input']>>;
  assigneesAny?: InputMaybe<Array<Scalars['String']['input']>>;
  attributes?: InputMaybe<Array<AttributeFilterInput>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  folderIds?: InputMaybe<Array<Scalars['String']['input']>>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  includeFolderChildren?: Scalars['Boolean']['input'];
  last?: InputMaybe<Scalars['Int']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  tagsAny?: InputMaybe<Array<Scalars['String']['input']>>;
  taskTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type ProjectNodeVersionArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeVersionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  authors?: InputMaybe<Array<Scalars['String']['input']>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  heroOnly?: Scalars['Boolean']['input'];
  heroOrLatestOnly?: Scalars['Boolean']['input'];
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  latestOnly?: Scalars['Boolean']['input'];
  productIds?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
  version?: InputMaybe<Scalars['Int']['input']>;
  versions?: InputMaybe<Array<Scalars['Int']['input']>>;
};


export type ProjectNodeWorkfileArgs = {
  id: Scalars['String']['input'];
};


export type ProjectNodeWorkfilesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  paths?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ProjectsConnection = {
  __typename?: 'ProjectsConnection';
  edges: Array<ProjectEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  /** Get a list of recorded events */
  events: EventsConnection;
  /** Get user inbox */
  inbox: ActivitiesConnection;
  /** Get kanban board */
  kanban: KanbanConnection;
  /** Current user */
  me: UserNode;
  /** Studio-wide product type configuration */
  productTypes: Array<ProductType>;
  /** Get a project by name */
  project: ProjectNode;
  /** Get a list of projects */
  projects: ProjectsConnection;
  /** Get a user by name */
  user: UserNode;
  /** Get a list of users */
  users: UsersConnection;
};


export type QueryEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasChildren?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  includeLogs?: Scalars['Boolean']['input'];
  last?: InputMaybe<Scalars['Int']['input']>;
  newerThan?: InputMaybe<Scalars['String']['input']>;
  olderThan?: InputMaybe<Scalars['String']['input']>;
  projects?: InputMaybe<Array<Scalars['String']['input']>>;
  states?: InputMaybe<Array<Scalars['String']['input']>>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  topics?: InputMaybe<Array<Scalars['String']['input']>>;
  users?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type QueryInboxArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  showActiveMessages?: InputMaybe<Scalars['Boolean']['input']>;
  showActiveProjects?: InputMaybe<Scalars['Boolean']['input']>;
  showImportantMessages?: InputMaybe<Scalars['Boolean']['input']>;
  showUnreadMessages?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryKanbanArgs = {
  assigneesAny?: InputMaybe<Array<Scalars['String']['input']>>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  projects?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type QueryProjectArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserArgs = {
  name: Scalars['String']['input'];
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  emails?: InputMaybe<Array<Scalars['String']['input']>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  projectName?: InputMaybe<Scalars['String']['input']>;
  projects?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type RepresentationAttribType = {
  __typename?: 'RepresentationAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  extension?: Maybe<Scalars['String']['output']>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  template?: Maybe<Scalars['String']['output']>;
};

export type RepresentationEdge = {
  __typename?: 'RepresentationEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Representation node */
  node: RepresentationNode;
};

export type RepresentationNode = BaseNode & {
  __typename?: 'RepresentationNode';
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: RepresentationAttribType;
  /** JSON serialized context data */
  context?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  /** Number of files of the representation */
  fileCount: Scalars['Int']['output'];
  /** Files in the representation */
  files: Array<FileNode>;
  id: Scalars['String']['output'];
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  traits?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  /** Parent version of the representation */
  version: VersionNode;
  versionId: Scalars['String']['output'];
};


export type RepresentationNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type RepresentationNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type RepresentationsConnection = {
  __typename?: 'RepresentationsConnection';
  edges: Array<RepresentationEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type Status = {
  __typename?: 'Status';
  color?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  scope?: Maybe<Array<Scalars['String']['output']>>;
  shortName?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
};

export type Tag = {
  __typename?: 'Tag';
  color?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

export type TaskAttribType = {
  __typename?: 'TaskAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  /** Deadline date and time */
  endDate?: Maybe<Scalars['DateTime']['output']>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  priority?: Maybe<Scalars['String']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  /** Date and time when the project or task or asset was started */
  startDate?: Maybe<Scalars['DateTime']['output']>;
};

export type TaskEdge = {
  __typename?: 'TaskEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The task node */
  node: TaskNode;
};

export type TaskNode = BaseNode & {
  __typename?: 'TaskNode';
  Folder?: Maybe<FolderNode>;
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  assignees: Array<Scalars['String']['output']>;
  attrib: TaskAttribType;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  /** Parent folder of the task */
  folder: FolderNode;
  folderId: Scalars['String']['output'];
  hasReviewables: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  links: LinksConnection;
  name: Scalars['String']['output'];
  ownAttrib: Array<Scalars['String']['output']>;
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  taskType: Scalars['String']['output'];
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  /** Return a list of versions. */
  versions: VersionsConnection;
  /** Return a list of workfiles. */
  workfiles: WorkfilesConnection;
};


export type TaskNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type TaskNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type TaskNodeVersionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  authors?: InputMaybe<Array<Scalars['String']['input']>>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  heroOnly?: Scalars['Boolean']['input'];
  heroOrLatestOnly?: Scalars['Boolean']['input'];
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  latestOnly?: Scalars['Boolean']['input'];
  productIds?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
  version?: InputMaybe<Scalars['Int']['input']>;
  versions?: InputMaybe<Array<Scalars['Int']['input']>>;
};


export type TaskNodeWorkfilesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  pathEx?: InputMaybe<Scalars['String']['input']>;
  paths?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type TaskType = {
  __typename?: 'TaskType';
  color?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  shortName?: Maybe<Scalars['String']['output']>;
};

export type TasksConnection = {
  __typename?: 'TasksConnection';
  edges: Array<TaskEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type ThumbnailInfo = {
  __typename?: 'ThumbnailInfo';
  id: Scalars['String']['output'];
  relation?: Maybe<Scalars['String']['output']>;
  sourceEntityId?: Maybe<Scalars['String']['output']>;
  sourceEntityType?: Maybe<Scalars['String']['output']>;
};

export type UserAttribType = {
  __typename?: 'UserAttribType';
  avatarUrl?: Maybe<Scalars['String']['output']>;
  developerMode?: Maybe<Scalars['Boolean']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  fullName?: Maybe<Scalars['String']['output']>;
};

export type UserEdge = {
  __typename?: 'UserEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** The user node */
  node: UserNode;
};

export type UserNode = {
  __typename?: 'UserNode';
  accessGroups: Scalars['String']['output'];
  active: Scalars['Boolean']['output'];
  allAttrib: Scalars['String']['output'];
  apiKeyPreview?: Maybe<Scalars['String']['output']>;
  attrib: UserAttribType;
  createdAt: Scalars['DateTime']['output'];
  defaultAccessGroups: Array<Scalars['String']['output']>;
  deleted: Scalars['Boolean']['output'];
  disablePasswordLogin: Scalars['Boolean']['output'];
  hasPassword: Scalars['Boolean']['output'];
  isAdmin: Scalars['Boolean']['output'];
  isDeveloper: Scalars['Boolean']['output'];
  isGuest: Scalars['Boolean']['output'];
  isManager: Scalars['Boolean']['output'];
  isService: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  tasks: TasksConnection;
  updatedAt: Scalars['DateTime']['output'];
  userPool?: Maybe<Scalars['String']['output']>;
};


export type UserNodeTasksArgs = {
  projectName: Scalars['String']['input'];
};

export type UsersConnection = {
  __typename?: 'UsersConnection';
  edges: Array<UserEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type VersionAttribType = {
  __typename?: 'VersionAttribType';
  clipIn?: Maybe<Scalars['Int']['output']>;
  clipOut?: Maybe<Scalars['Int']['output']>;
  colorSpace?: Maybe<Scalars['String']['output']>;
  comment?: Maybe<Scalars['String']['output']>;
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  families?: Maybe<Array<Scalars['String']['output']>>;
  /** Frame rate */
  fps?: Maybe<Scalars['Float']['output']>;
  frameEnd?: Maybe<Scalars['Int']['output']>;
  frameStart?: Maybe<Scalars['Int']['output']>;
  handleEnd?: Maybe<Scalars['Int']['output']>;
  handleStart?: Maybe<Scalars['Int']['output']>;
  intent?: Maybe<Scalars['String']['output']>;
  machine?: Maybe<Scalars['String']['output']>;
  pixelAspect?: Maybe<Scalars['Float']['output']>;
  /** Vertical resolution */
  resolutionHeight?: Maybe<Scalars['Int']['output']>;
  /** Horizontal resolution */
  resolutionWidth?: Maybe<Scalars['Int']['output']>;
  site?: Maybe<Scalars['String']['output']>;
  source?: Maybe<Scalars['String']['output']>;
};

export type VersionEdge = {
  __typename?: 'VersionEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Version node */
  node: VersionNode;
};

export type VersionListItem = {
  __typename?: 'VersionListItem';
  id: Scalars['String']['output'];
  /** Version name */
  name: Scalars['String']['output'];
  version: Scalars['Int']['output'];
};

export type VersionNode = BaseNode & {
  __typename?: 'VersionNode';
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: VersionAttribType;
  author?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['String']['output']>;
  hasReviewables: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  /** Parent product of the version */
  product: ProductNode;
  productId: Scalars['String']['output'];
  projectName: Scalars['String']['output'];
  /** Return a list of representations. */
  representations: RepresentationsConnection;
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  /** Task */
  task?: Maybe<TaskNode>;
  taskId?: Maybe<Scalars['String']['output']>;
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  version: Scalars['Int']['output'];
};


export type VersionNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type VersionNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type VersionNodeRepresentationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hasLinks?: InputMaybe<HasLinksFilter>;
  ids?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  versionIds?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type VersionsConnection = {
  __typename?: 'VersionsConnection';
  edges: Array<VersionEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type WorkfileAttribType = {
  __typename?: 'WorkfileAttribType';
  /** Textual description of the entity */
  description?: Maybe<Scalars['String']['output']>;
  extension?: Maybe<Scalars['String']['output']>;
};

export type WorkfileEdge = {
  __typename?: 'WorkfileEdge';
  cursor?: Maybe<Scalars['String']['output']>;
  /** Workfile node */
  node: WorkfileNode;
};

export type WorkfileNode = BaseNode & {
  __typename?: 'WorkfileNode';
  Parents?: Maybe<Array<Scalars['String']['output']>>;
  active: Scalars['Boolean']['output'];
  activities: ActivitiesConnection;
  allAttrib: Scalars['String']['output'];
  attrib: WorkfileAttribType;
  createdAt: Scalars['DateTime']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  data?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  links: LinksConnection;
  name: Scalars['String']['output'];
  parents: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  projectName: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  /** Parent task of the workfile */
  task: TaskNode;
  taskId?: Maybe<Scalars['String']['output']>;
  thumbnail?: Maybe<ThumbnailInfo>;
  thumbnailId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};


export type WorkfileNodeActivitiesArgs = {
  activityTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type WorkfileNodeLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  direction?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  linkTypes?: InputMaybe<Array<Scalars['String']['input']>>;
  nameEx?: InputMaybe<Scalars['String']['input']>;
  names?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type WorkfilesConnection = {
  __typename?: 'WorkfilesConnection';
  edges: Array<WorkfileEdge>;
  /** Pagination information */
  pageInfo: PageInfo;
};

export type ActivityFragmentFragment = { __typename?: 'ActivityNode', activityId: string, activityType: string, activityData: string, referenceType: string, referenceId: string, entityId?: string | null, body: string, createdAt: any, updatedAt: any, author?: { __typename?: 'UserNode', name: string, deleted: boolean, active: boolean, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } | null, files: Array<{ __typename?: 'ActivityFileNode', id: string, name?: string | null, size: string, mime?: string | null }>, origin?: { __typename?: 'ActivityOriginNode', id: string, name: string, label?: string | null, type: string } | null, reactions: Array<{ __typename?: 'ActivityReactionNode', fullName?: string | null, userName: string, reaction: string, timestamp: any }>, version?: { __typename?: 'VersionNode', attrib: { __typename?: 'VersionAttribType', comment?: string | null } } | null };

export type GetActivitiesByIdQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
  activityIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetActivitiesByIdQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, activities: { __typename?: 'ActivitiesConnection', pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ __typename?: 'ActivityEdge', cursor?: string | null, node: { __typename?: 'ActivityNode', activityId: string, activityType: string, activityData: string, referenceType: string, referenceId: string, entityId?: string | null, body: string, createdAt: any, updatedAt: any, author?: { __typename?: 'UserNode', name: string, deleted: boolean, active: boolean, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } | null, files: Array<{ __typename?: 'ActivityFileNode', id: string, name?: string | null, size: string, mime?: string | null }>, origin?: { __typename?: 'ActivityOriginNode', id: string, name: string, label?: string | null, type: string } | null, reactions: Array<{ __typename?: 'ActivityReactionNode', fullName?: string | null, userName: string, reaction: string, timestamp: any }>, version?: { __typename?: 'VersionNode', attrib: { __typename?: 'VersionAttribType', comment?: string | null } } | null } }> } } };

export type GetActivityUsersQueryVariables = Exact<{
  projects?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetActivityUsersQuery = { __typename?: 'Query', users: { __typename?: 'UsersConnection', edges: Array<{ __typename?: 'UserEdge', node: { __typename?: 'UserNode', name: string, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } }> } };

export type GetActivitiesQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  referenceTypes?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  activityTypes?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetActivitiesQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, activities: { __typename?: 'ActivitiesConnection', pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ __typename?: 'ActivityEdge', cursor?: string | null, node: { __typename?: 'ActivityNode', activityId: string, activityType: string, activityData: string, referenceType: string, referenceId: string, entityId?: string | null, body: string, createdAt: any, updatedAt: any, author?: { __typename?: 'UserNode', name: string, deleted: boolean, active: boolean, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } | null, files: Array<{ __typename?: 'ActivityFileNode', id: string, name?: string | null, size: string, mime?: string | null }>, origin?: { __typename?: 'ActivityOriginNode', id: string, name: string, label?: string | null, type: string } | null, reactions: Array<{ __typename?: 'ActivityReactionNode', fullName?: string | null, userName: string, reaction: string, timestamp: any }>, version?: { __typename?: 'VersionNode', attrib: { __typename?: 'VersionAttribType', comment?: string | null } } | null } }> } } };

export type GetEntitiesChecklistsQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;


export type GetEntitiesChecklistsQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, activities: { __typename?: 'ActivitiesConnection', edges: Array<{ __typename?: 'ActivityEdge', cursor?: string | null, node: { __typename?: 'ActivityNode', activityId: string, body: string } }> } } };

export type GetDetailsPanelFolderQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityId: Scalars['String']['input'];
}>;


export type GetDetailsPanelFolderQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', projectName: string, code: string, folder?: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, status: string, tags: Array<string>, updatedAt: any, createdAt: any, thumbnailId?: string | null, folderType: string, path?: string | null, hasReviewables: boolean, allAttrib: string } | null } };

export type GetDetailsPanelRepresentationQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityId: Scalars['String']['input'];
}>;


export type GetDetailsPanelRepresentationQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', representation?: { __typename?: 'RepresentationNode', id: string, versionId: string, name: string, status: string, tags: Array<string>, updatedAt: any, createdAt: any, allAttrib: string, context?: string | null, version: { __typename?: 'VersionNode', id: string, thumbnailId?: string | null, name: string, updatedAt: any, createdAt: any, productId: string, version: number, author?: string | null, task?: { __typename?: 'TaskNode', id: string, name: string, label?: string | null, assignees: Array<string>, taskType: string } | null, product: { __typename?: 'ProductNode', id: string, name: string, productType: string, folder: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, path?: string | null, folderType: string }, latestVersion?: { __typename?: 'VersionNode', version: number } | null } } } | null } };

export type GetDetailsPanelTaskQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityId: Scalars['String']['input'];
}>;


export type GetDetailsPanelTaskQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', projectName: string, code: string, task?: { __typename?: 'TaskNode', id: string, name: string, label?: string | null, status: string, tags: Array<string>, allAttrib: string, taskType: string, assignees: Array<string>, updatedAt: any, createdAt: any, folderId: string, thumbnailId?: string | null, hasReviewables: boolean, folder: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, path?: string | null, folderType: string }, versions: { __typename?: 'VersionsConnection', edges: Array<{ __typename?: 'VersionEdge', node: { __typename?: 'VersionNode', id: string, thumbnailId?: string | null, name: string, updatedAt: any, createdAt: any, productId: string, version: number, author?: string | null } }> } } | null } };

export type GetDetailsPanelVersionQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  entityId: Scalars['String']['input'];
}>;


export type GetDetailsPanelVersionQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', projectName: string, code: string, version?: { __typename?: 'VersionNode', id: string, version: number, name: string, author?: string | null, status: string, tags: Array<string>, updatedAt: any, createdAt: any, thumbnailId?: string | null, hasReviewables: boolean, allAttrib: string, product: { __typename?: 'ProductNode', id: string, name: string, productType: string, folder: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, path?: string | null, folderType: string }, latestVersion?: { __typename?: 'VersionNode', version: number } | null }, task?: { __typename?: 'TaskNode', id: string, name: string, label?: string | null, assignees: Array<string>, taskType: string } | null, representations: { __typename?: 'RepresentationsConnection', edges: Array<{ __typename?: 'RepresentationEdge', node: { __typename?: 'RepresentationNode', id: string, name: string, fileCount: number } }> } } | null } };

export type GetProductVersionsQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  productId: Scalars['String']['input'];
}>;


export type GetProductVersionsQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', product?: { __typename?: 'ProductNode', versionList: Array<{ __typename?: 'VersionListItem', id: string, name: string, version: number }> } | null } };

export type DetailsPanelFolderFragmentFragment = { __typename?: 'FolderNode', id: string, name: string, label?: string | null, path?: string | null, folderType: string };

export type DetailsPanelProductFragmentFragment = { __typename?: 'ProductNode', id: string, name: string, productType: string, latestVersion?: { __typename?: 'VersionNode', version: number } | null };

export type DetailsPanelRepresentationFragmentFragment = { __typename?: 'RepresentationNode', id: string, name: string, fileCount: number };

export type DetailsPanelTaskFragmentFragment = { __typename?: 'TaskNode', id: string, name: string, label?: string | null, assignees: Array<string>, taskType: string };

export type DetailsPanelVersionFragmentFragment = { __typename?: 'VersionNode', id: string, thumbnailId?: string | null, name: string, updatedAt: any, createdAt: any, productId: string, version: number, author?: string | null };

export type GetListItemsQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  listId: Scalars['String']['input'];
  first?: InputMaybe<Scalars['Int']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetListItemsQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', entityLists: { __typename?: 'EntityListsConnection', pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null }, edges: Array<{ __typename?: 'EntityListEdge', node: { __typename?: 'EntityListNode', id: string, active: boolean, items: { __typename?: 'EntityListItemsConnection', pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null }, edges: Array<{ __typename?: 'EntityListItemEdge', id: string, entityId: string, entityType: string, allAttrib: string, position: number, ownItemAttrib: Array<string>, node?: { __typename?: 'FolderNode', label?: string | null, status: string, tags: Array<string>, folderType: string, path?: string | null, ownAttrib: Array<string>, hasReviewables: boolean, active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string>, folderId: string } | { __typename?: 'ProductNode', status: string, tags: Array<string>, productType: string, folderId: string, active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string>, folder: { __typename?: 'FolderNode', path?: string | null, folderType: string } } | { __typename?: 'RepresentationNode', active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string> } | { __typename?: 'TaskNode', label?: string | null, status: string, tags: Array<string>, taskType: string, assignees: Array<string>, ownAttrib: Array<string>, hasReviewables: boolean, folderId: string, active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string>, folder: { __typename?: 'FolderNode', path?: string | null, folderType: string } } | { __typename?: 'VersionNode', status: string, tags: Array<string>, hasReviewables: boolean, active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string>, product: { __typename?: 'ProductNode', id: string, name: string, productType: string, folderId: string, folder: { __typename?: 'FolderNode', id: string, path?: string | null, folderType: string } }, task?: { __typename?: 'TaskNode', name: string, taskType: string } | null } | { __typename?: 'WorkfileNode', active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string> } | null }> } } }> } } };

export type GetListsQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetListsQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', entityLists: { __typename?: 'EntityListsConnection', pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null }, edges: Array<{ __typename?: 'EntityListEdge', node: { __typename?: 'EntityListNode', id: string, label: string, entityListType: string, tags: Array<string>, data: string, entityType: string, active: boolean, createdAt: any, updatedAt: any, owner?: string | null, count: number } }> } } };

export type GetListsItemsForReviewSessionQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  first?: InputMaybe<Scalars['Int']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  ids?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetListsItemsForReviewSessionQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', entityLists: { __typename?: 'EntityListsConnection', pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null }, edges: Array<{ __typename?: 'EntityListEdge', node: { __typename?: 'EntityListNode', id: string, label: string, active: boolean, entityType: string, updatedAt: any, count: number } }> } } };

type ListItemFragment_FolderNode_Fragment = { __typename?: 'FolderNode', label?: string | null, status: string, tags: Array<string>, folderType: string, path?: string | null, ownAttrib: Array<string>, hasReviewables: boolean, active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string>, folderId: string };

type ListItemFragment_ProductNode_Fragment = { __typename?: 'ProductNode', status: string, tags: Array<string>, productType: string, folderId: string, active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string>, folder: { __typename?: 'FolderNode', path?: string | null, folderType: string } };

type ListItemFragment_RepresentationNode_Fragment = { __typename?: 'RepresentationNode', active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string> };

type ListItemFragment_TaskNode_Fragment = { __typename?: 'TaskNode', label?: string | null, status: string, tags: Array<string>, taskType: string, assignees: Array<string>, ownAttrib: Array<string>, hasReviewables: boolean, folderId: string, active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string>, folder: { __typename?: 'FolderNode', path?: string | null, folderType: string } };

type ListItemFragment_VersionNode_Fragment = { __typename?: 'VersionNode', status: string, tags: Array<string>, hasReviewables: boolean, active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string>, product: { __typename?: 'ProductNode', id: string, name: string, productType: string, folderId: string, folder: { __typename?: 'FolderNode', id: string, path?: string | null, folderType: string } }, task?: { __typename?: 'TaskNode', name: string, taskType: string } | null };

type ListItemFragment_WorkfileNode_Fragment = { __typename?: 'WorkfileNode', active: boolean, name: string, updatedAt: any, createdAt: any, parents: Array<string> };

export type ListItemFragmentFragment = ListItemFragment_FolderNode_Fragment | ListItemFragment_ProductNode_Fragment | ListItemFragment_RepresentationNode_Fragment | ListItemFragment_TaskNode_Fragment | ListItemFragment_VersionNode_Fragment | ListItemFragment_WorkfileNode_Fragment;

export type GetTasksByParentQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  parentIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
  filter?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetTasksByParentQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, tasks: { __typename?: 'TasksConnection', edges: Array<{ __typename?: 'TaskEdge', node: { __typename?: 'TaskNode', id: string, folderId: string, label?: string | null, name: string, ownAttrib: Array<string>, status: string, tags: Array<string>, taskType: string, updatedAt: any, createdAt: any, active: boolean, assignees: Array<string>, allAttrib: string, hasReviewables: boolean, parents: Array<string> } }> } } };

export type GetTasksListQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  folderIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetTasksListQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, tasks: { __typename?: 'TasksConnection', pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean }, edges: Array<{ __typename?: 'TaskEdge', cursor?: string | null, node: { __typename?: 'TaskNode', id: string, folderId: string, label?: string | null, name: string, ownAttrib: Array<string>, status: string, tags: Array<string>, taskType: string, updatedAt: any, createdAt: any, active: boolean, assignees: Array<string>, allAttrib: string, hasReviewables: boolean, parents: Array<string> } }> } } };

export type TaskPropsFragmentFragment = { __typename?: 'TaskNode', id: string, folderId: string, label?: string | null, name: string, ownAttrib: Array<string>, status: string, tags: Array<string>, taskType: string, updatedAt: any, createdAt: any, active: boolean, assignees: Array<string>, allAttrib: string, hasReviewables: boolean, parents: Array<string> };

export type GetProjectLatestQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
}>;


export type GetProjectLatestQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string } };

export type GetKanbanQueryVariables = Exact<{
  projects?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  assignees?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetKanbanQuery = { __typename?: 'Query', kanban: { __typename?: 'KanbanConnection', edges: Array<{ __typename?: 'KanbanEdge', node: { __typename?: 'KanbanNode', id: string, projectName: string, projectCode: string, name: string, label?: string | null, status: string, tags: Array<string>, taskType: string, assignees: Array<string>, updatedAt: any, createdAt: any, dueDate?: any | null, folderId: string, thumbnailId?: string | null, folderLabel?: string | null, folderName: string, folderPath: string, hasReviewables: boolean, priority?: string | null } }> } };

export type GetKanbanProjectUsersQueryVariables = Exact<{
  projects?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
}>;


export type GetKanbanProjectUsersQuery = { __typename?: 'Query', users: { __typename?: 'UsersConnection', edges: Array<{ __typename?: 'UserEdge', node: { __typename?: 'UserNode', name: string, accessGroups: string, isManager: boolean, isAdmin: boolean, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } }> } };

export type GetKanbanTasksQueryVariables = Exact<{
  projects?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  taskIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetKanbanTasksQuery = { __typename?: 'Query', kanban: { __typename?: 'KanbanConnection', edges: Array<{ __typename?: 'KanbanEdge', node: { __typename?: 'KanbanNode', id: string, projectName: string, projectCode: string, name: string, label?: string | null, status: string, tags: Array<string>, taskType: string, assignees: Array<string>, updatedAt: any, createdAt: any, dueDate?: any | null, folderId: string, thumbnailId?: string | null, folderLabel?: string | null, folderName: string, folderPath: string, hasReviewables: boolean, priority?: string | null } }> } };

export type KanbanFragmentFragment = { __typename?: 'KanbanNode', id: string, projectName: string, projectCode: string, name: string, label?: string | null, status: string, tags: Array<string>, taskType: string, assignees: Array<string>, updatedAt: any, createdAt: any, dueDate?: any | null, folderId: string, thumbnailId?: string | null, folderLabel?: string | null, folderName: string, folderPath: string, hasReviewables: boolean, priority?: string | null };

export type GetActiveUsersCountQueryVariables = Exact<{ [key: string]: never; }>;


export type GetActiveUsersCountQuery = { __typename?: 'Query', users: { __typename?: 'UsersConnection', edges: Array<{ __typename?: 'UserEdge', node: { __typename?: 'UserNode', active: boolean, isGuest: boolean } }> } };

export type GetAllAssigneesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllAssigneesQuery = { __typename?: 'Query', users: { __typename?: 'UsersConnection', edges: Array<{ __typename?: 'UserEdge', node: { __typename?: 'UserNode', name: string, updatedAt: any, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } }> } };

export type GetAllProjectUsersAsAssigneeQueryVariables = Exact<{
  projectName?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetAllProjectUsersAsAssigneeQuery = { __typename?: 'Query', users: { __typename?: 'UsersConnection', edges: Array<{ __typename?: 'UserEdge', node: { __typename?: 'UserNode', name: string, updatedAt: any, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } }> } };

export type GetLatestProductVersionQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  productId: Scalars['String']['input'];
}>;


export type GetLatestProductVersionQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', versions: { __typename?: 'VersionsConnection', edges: Array<{ __typename?: 'VersionEdge', node: { __typename?: 'VersionNode', id: string, name: string, version: number, productId: string, createdAt: any, updatedAt: any, status: string, active: boolean } }> } } };

export type GetInboxHasUnreadQueryVariables = Exact<{ [key: string]: never; }>;


export type GetInboxHasUnreadQuery = { __typename?: 'Query', inbox: { __typename?: 'ActivitiesConnection', edges: Array<{ __typename?: 'ActivityEdge', node: { __typename?: 'ActivityNode', referenceId: string, read: boolean } }> } };

export type GetInboxMessagesQueryVariables = Exact<{
  last?: InputMaybe<Scalars['Int']['input']>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  important?: InputMaybe<Scalars['Boolean']['input']>;
  cursor?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetInboxMessagesQuery = { __typename?: 'Query', inbox: { __typename?: 'ActivitiesConnection', pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ __typename?: 'ActivityEdge', cursor?: string | null, node: { __typename?: 'ActivityNode', projectName: string, activityId: string, activityType: string, activityData: string, referenceType: string, referenceId: string, body: string, createdAt: any, updatedAt: any, active: boolean, read: boolean, author?: { __typename?: 'UserNode', name: string, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } | null, origin?: { __typename?: 'ActivityOriginNode', id: string, name: string, label?: string | null, type: string, subtype?: string | null } | null, parents: Array<{ __typename?: 'ActivityOriginNode', type: string, name: string, label?: string | null }> } }> } };

export type MessageFragmentFragment = { __typename?: 'ActivityNode', projectName: string, activityId: string, activityType: string, activityData: string, referenceType: string, referenceId: string, body: string, createdAt: any, updatedAt: any, active: boolean, read: boolean, author?: { __typename?: 'UserNode', name: string, attrib: { __typename?: 'UserAttribType', fullName?: string | null } } | null, origin?: { __typename?: 'ActivityOriginNode', id: string, name: string, label?: string | null, type: string, subtype?: string | null } | null, parents: Array<{ __typename?: 'ActivityOriginNode', type: string, name: string, label?: string | null }> };

export type GetInboxUnreadCountQueryVariables = Exact<{
  important?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type GetInboxUnreadCountQuery = { __typename?: 'Query', inbox: { __typename?: 'ActivitiesConnection', edges: Array<{ __typename?: 'ActivityEdge', node: { __typename?: 'ActivityNode', referenceId: string, read: boolean } }> } };

export type GetMarketInstallEventsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMarketInstallEventsQuery = { __typename?: 'Query', events: { __typename?: 'EventsConnection', edges: Array<{ __typename?: 'EventEdge', node: { __typename?: 'EventNode', id: string, status: string, description: string, summary: string } }> } };

export type GetInstallEventsQueryVariables = Exact<{
  ids: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;


export type GetInstallEventsQuery = { __typename?: 'Query', events: { __typename?: 'EventsConnection', edges: Array<{ __typename?: 'EventEdge', node: { __typename?: 'EventNode', id: string, status: string, description: string } }> } };

export type GetProgressTaskQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  taskId: Scalars['String']['input'];
}>;


export type GetProgressTaskQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, task?: { __typename?: 'TaskNode', projectName: string, id: string, name: string, label?: string | null, taskType: string, status: string, assignees: Array<string>, updatedAt: any, active: boolean, hasReviewables: boolean, tags: Array<string>, attrib: { __typename?: 'TaskAttribType', priority?: string | null, endDate?: any | null, resolutionHeight?: number | null, resolutionWidth?: number | null, fps?: number | null }, folder: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, folderType: string, parents: Array<string>, status: string, updatedAt: any, parent?: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, parents: Array<string> } | null } } | null } };

export type GetTasksProgressQueryVariables = Exact<{
  projectName: Scalars['String']['input'];
  folderIds?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  assignees?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  assigneesAny?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  tags?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  tagsAny?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  statuses?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  taskTypes?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  attributes?: InputMaybe<Array<AttributeFilterInput> | AttributeFilterInput>;
}>;


export type GetTasksProgressQuery = { __typename?: 'Query', project: { __typename?: 'ProjectNode', name: string, tasks: { __typename?: 'TasksConnection', edges: Array<{ __typename?: 'TaskEdge', node: { __typename?: 'TaskNode', projectName: string, id: string, name: string, label?: string | null, taskType: string, status: string, assignees: Array<string>, updatedAt: any, active: boolean, hasReviewables: boolean, tags: Array<string>, attrib: { __typename?: 'TaskAttribType', priority?: string | null, endDate?: any | null, resolutionHeight?: number | null, resolutionWidth?: number | null, fps?: number | null }, folder: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, folderType: string, parents: Array<string>, status: string, updatedAt: any, parent?: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, parents: Array<string> } | null } } }> } } };

export type ProgressTaskFragmentFragment = { __typename?: 'TaskNode', projectName: string, id: string, name: string, label?: string | null, taskType: string, status: string, assignees: Array<string>, updatedAt: any, active: boolean, hasReviewables: boolean, tags: Array<string>, attrib: { __typename?: 'TaskAttribType', priority?: string | null, endDate?: any | null, resolutionHeight?: number | null, resolutionWidth?: number | null, fps?: number | null }, folder: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, folderType: string, parents: Array<string>, status: string, updatedAt: any, parent?: { __typename?: 'FolderNode', id: string, name: string, label?: string | null, parents: Array<string> } | null } };

export const ActivityFragmentFragmentDoc = `
    fragment ActivityFragment on ActivityNode {
  activityId
  activityType
  activityData
  referenceType
  referenceId
  entityId
  body
  createdAt
  updatedAt
  author {
    name
    deleted
    active
    attrib {
      fullName
    }
  }
  files {
    id
    name
    size
    mime
  }
  origin {
    id
    name
    label
    type
  }
  reactions {
    fullName
    userName
    reaction
    timestamp
  }
  version {
    attrib {
      comment
    }
  }
}
    `;
export const DetailsPanelFolderFragmentFragmentDoc = `
    fragment DetailsPanelFolderFragment on FolderNode {
  id
  name
  label
  path
  folderType
}
    `;
export const DetailsPanelProductFragmentFragmentDoc = `
    fragment DetailsPanelProductFragment on ProductNode {
  id
  name
  productType
  latestVersion {
    version
  }
}
    `;
export const DetailsPanelRepresentationFragmentFragmentDoc = `
    fragment DetailsPanelRepresentationFragment on RepresentationNode {
  id
  name
  fileCount
}
    `;
export const DetailsPanelTaskFragmentFragmentDoc = `
    fragment DetailsPanelTaskFragment on TaskNode {
  id
  name
  label
  assignees
  taskType
}
    `;
export const DetailsPanelVersionFragmentFragmentDoc = `
    fragment DetailsPanelVersionFragment on VersionNode {
  id
  thumbnailId
  name
  updatedAt
  createdAt
  productId
  version
  author
}
    `;
export const ListItemFragmentFragmentDoc = `
    fragment ListItemFragment on BaseNode {
  active
  name
  updatedAt
  createdAt
  parents
  ... on TaskNode {
    label
    status
    tags
    taskType
    assignees
    ownAttrib
    hasReviewables
    folderId
    folder {
      path
      folderType
    }
  }
  ... on FolderNode {
    label
    status
    tags
    folderType
    path
    ownAttrib
    hasReviewables
    folderId: id
  }
  ... on ProductNode {
    status
    tags
    productType
    folderId
    folder {
      path
      folderType
    }
  }
  ... on VersionNode {
    status
    tags
    hasReviewables
    product {
      id
      name
      productType
      folderId
      folder {
        id
        path
        folderType
      }
    }
    task {
      name
      taskType
    }
  }
}
    `;
export const TaskPropsFragmentFragmentDoc = `
    fragment TaskPropsFragment on TaskNode {
  id
  folderId
  label
  name
  ownAttrib
  status
  tags
  taskType
  updatedAt
  createdAt
  active
  assignees
  allAttrib
  hasReviewables
  parents
}
    `;
export const KanbanFragmentFragmentDoc = `
    fragment KanbanFragment on KanbanNode {
  id
  projectName
  projectCode
  name
  label
  status
  tags
  taskType
  assignees
  updatedAt
  createdAt
  dueDate
  folderId
  thumbnailId
  folderId
  folderLabel
  folderName
  folderPath
  hasReviewables
  priority
}
    `;
export const MessageFragmentFragmentDoc = `
    fragment MessageFragment on ActivityNode {
  projectName
  activityId
  activityType
  activityData
  referenceType
  referenceId
  body
  createdAt
  updatedAt
  active
  read
  author {
    name
    attrib {
      fullName
    }
  }
  origin {
    id
    name
    label
    type
    subtype
  }
  parents {
    type
    name
    label
  }
}
    `;
export const ProgressTaskFragmentFragmentDoc = `
    fragment ProgressTaskFragment on TaskNode {
  projectName
  id
  name
  label
  taskType
  status
  assignees
  updatedAt
  active
  hasReviewables
  tags
  attrib {
    priority
    endDate
    resolutionHeight
    resolutionWidth
    fps
  }
  folder {
    id
    name
    label
    folderType
    parents
    status
    updatedAt
    parent {
      id
      name
      label
      parents
    }
  }
}
    `;
export const GetActivitiesByIdDocument = `
    query GetActivitiesById($projectName: String!, $entityIds: [String!]!, $activityIds: [String!]) {
  project(name: $projectName) {
    name
    activities(entityIds: $entityIds, activityIds: $activityIds) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      edges {
        cursor
        node {
          ...ActivityFragment
        }
      }
    }
  }
}
    ${ActivityFragmentFragmentDoc}`;
export const GetActivityUsersDocument = `
    query GetActivityUsers($projects: [String!]) {
  users(last: 2000, projects: $projects) {
    edges {
      node {
        name
        attrib {
          fullName
        }
      }
    }
  }
}
    `;
export const GetActivitiesDocument = `
    query GetActivities($projectName: String!, $entityIds: [String!]!, $after: String, $first: Int, $before: String, $last: Int, $referenceTypes: [String!], $activityTypes: [String!]) {
  project(name: $projectName) {
    name
    activities(
      entityIds: $entityIds
      after: $after
      first: $first
      before: $before
      last: $last
      referenceTypes: $referenceTypes
      activityTypes: $activityTypes
    ) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      edges {
        cursor
        node {
          ...ActivityFragment
        }
      }
    }
  }
}
    ${ActivityFragmentFragmentDoc}`;
export const GetEntitiesChecklistsDocument = `
    query GetEntitiesChecklists($projectName: String!, $entityIds: [String!]!) {
  project(name: $projectName) {
    name
    activities(
      entityIds: $entityIds
      last: 1000
      activityTypes: ["checklist"]
      referenceTypes: ["origin"]
    ) {
      edges {
        cursor
        node {
          activityId
          body
        }
      }
    }
  }
}
    `;
export const GetDetailsPanelFolderDocument = `
    query GetDetailsPanelFolder($projectName: String!, $entityId: String!) {
  project(name: $projectName) {
    projectName
    code
    folder(id: $entityId) {
      id
      name
      label
      status
      tags
      updatedAt
      createdAt
      thumbnailId
      folderType
      path
      hasReviewables
      allAttrib
    }
  }
}
    `;
export const GetDetailsPanelRepresentationDocument = `
    query GetDetailsPanelRepresentation($projectName: String!, $entityId: String!) {
  project(name: $projectName) {
    representation(id: $entityId) {
      id
      versionId
      name
      status
      tags
      updatedAt
      createdAt
      allAttrib
      context
      version {
        ...DetailsPanelVersionFragment
        task {
          ...DetailsPanelTaskFragment
        }
        product {
          ...DetailsPanelProductFragment
          folder {
            ...DetailsPanelFolderFragment
          }
        }
      }
    }
  }
}
    ${DetailsPanelVersionFragmentFragmentDoc}
${DetailsPanelTaskFragmentFragmentDoc}
${DetailsPanelProductFragmentFragmentDoc}
${DetailsPanelFolderFragmentFragmentDoc}`;
export const GetDetailsPanelTaskDocument = `
    query GetDetailsPanelTask($projectName: String!, $entityId: String!) {
  project(name: $projectName) {
    projectName
    code
    task(id: $entityId) {
      id
      name
      label
      status
      tags
      allAttrib
      taskType
      assignees
      updatedAt
      createdAt
      folderId
      thumbnailId
      hasReviewables
      folder {
        ...DetailsPanelFolderFragment
      }
      versions(last: 1) {
        edges {
          node {
            ...DetailsPanelVersionFragment
          }
        }
      }
    }
  }
}
    ${DetailsPanelFolderFragmentFragmentDoc}
${DetailsPanelVersionFragmentFragmentDoc}`;
export const GetDetailsPanelVersionDocument = `
    query GetDetailsPanelVersion($projectName: String!, $entityId: String!) {
  project(name: $projectName) {
    projectName
    code
    version(id: $entityId) {
      id
      version
      name
      author
      status
      tags
      updatedAt
      createdAt
      thumbnailId
      hasReviewables
      product {
        ...DetailsPanelProductFragment
        folder {
          ...DetailsPanelFolderFragment
        }
      }
      task {
        ...DetailsPanelTaskFragment
      }
      allAttrib
      representations {
        edges {
          node {
            ...DetailsPanelRepresentationFragment
          }
        }
      }
    }
  }
}
    ${DetailsPanelProductFragmentFragmentDoc}
${DetailsPanelFolderFragmentFragmentDoc}
${DetailsPanelTaskFragmentFragmentDoc}
${DetailsPanelRepresentationFragmentFragmentDoc}`;
export const GetProductVersionsDocument = `
    query GetProductVersions($projectName: String!, $productId: String!) {
  project(name: $projectName) {
    product(id: $productId) {
      versionList {
        id
        name
        version
      }
    }
  }
}
    `;
export const GetListItemsDocument = `
    query GetListItems($projectName: String!, $listId: String!, $first: Int, $after: String, $before: String, $last: Int, $sortBy: String, $filter: String) {
  project(name: $projectName) {
    entityLists(ids: [$listId]) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        node {
          id
          active
          items(
            first: $first
            after: $after
            before: $before
            last: $last
            sortBy: $sortBy
            filter: $filter
          ) {
            pageInfo {
              hasNextPage
              endCursor
            }
            edges {
              id
              entityId
              entityType
              allAttrib
              ownItemAttrib: ownAttrib
              position
              node {
                ...ListItemFragment
              }
            }
          }
        }
      }
    }
  }
}
    ${ListItemFragmentFragmentDoc}`;
export const GetListsDocument = `
    query GetLists($projectName: String!, $first: Int!, $after: String, $filter: String) {
  project(name: $projectName) {
    entityLists(first: $first, after: $after, filter: $filter) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        node {
          id
          label
          entityListType
          tags
          data
          entityType
          active
          createdAt
          updatedAt
          owner
          count
        }
      }
    }
  }
}
    `;
export const GetListsItemsForReviewSessionDocument = `
    query GetListsItemsForReviewSession($projectName: String!, $first: Int, $after: String, $ids: [String!]) {
  project(name: $projectName) {
    entityLists(
      first: $first
      after: $after
      sortBy: "updatedAt"
      filter: "{\\"conditions\\":[{\\"key\\":\\"entityListType\\",\\"value\\":[\\"generic\\"],\\"operator\\":\\"in\\"}],\\"operator\\":\\"and\\"}"
      ids: $ids
    ) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        node {
          id
          label
          active
          entityType
          updatedAt
          count
        }
      }
    }
  }
}
    `;
export const GetTasksByParentDocument = `
    query GetTasksByParent($projectName: String!, $parentIds: [String!]!, $filter: String, $search: String) {
  project(name: $projectName) {
    name
    tasks(folderIds: $parentIds, filter: $filter, search: $search) {
      edges {
        node {
          ...TaskPropsFragment
        }
      }
    }
  }
}
    ${TaskPropsFragmentFragmentDoc}`;
export const GetTasksListDocument = `
    query GetTasksList($projectName: String!, $folderIds: [String!], $taskIds: [String!], $filter: String, $search: String, $after: String, $first: Int, $before: String, $last: Int, $sortBy: String) {
  project(name: $projectName) {
    name
    tasks(
      filter: $filter
      search: $search
      folderIds: $folderIds
      after: $after
      first: $first
      before: $before
      last: $last
      sortBy: $sortBy
      ids: $taskIds
    ) {
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      edges {
        cursor
        node {
          ...TaskPropsFragment
        }
      }
    }
  }
}
    ${TaskPropsFragmentFragmentDoc}`;
export const GetProjectLatestDocument = `
    query GetProjectLatest($projectName: String!) {
  project(name: $projectName) {
    name
  }
}
    `;
export const GetKanbanDocument = `
    query GetKanban($projects: [String!], $assignees: [String!]) {
  kanban(projects: $projects, assigneesAny: $assignees, last: 2000) {
    edges {
      node {
        ...KanbanFragment
      }
    }
  }
}
    ${KanbanFragmentFragmentDoc}`;
export const GetKanbanProjectUsersDocument = `
    query GetKanbanProjectUsers($projects: [String!]) {
  users(last: 2000, projects: $projects) {
    edges {
      node {
        name
        accessGroups
        isManager
        isAdmin
        attrib {
          fullName
        }
      }
    }
  }
}
    `;
export const GetKanbanTasksDocument = `
    query GetKanbanTasks($projects: [String!], $taskIds: [String!], $last: Int) {
  kanban(projects: $projects, taskIds: $taskIds, last: $last) {
    edges {
      node {
        ...KanbanFragment
      }
    }
  }
}
    ${KanbanFragmentFragmentDoc}`;
export const GetActiveUsersCountDocument = `
    query GetActiveUsersCount {
  users(last: 2000) {
    edges {
      node {
        active
        isGuest
      }
    }
  }
}
    `;
export const GetAllAssigneesDocument = `
    query GetAllAssignees {
  users(last: 2000) {
    edges {
      node {
        name
        updatedAt
        attrib {
          fullName
        }
      }
    }
  }
}
    `;
export const GetAllProjectUsersAsAssigneeDocument = `
    query GetAllProjectUsersAsAssignee($projectName: String) {
  users(last: 2000, projectName: $projectName) {
    edges {
      node {
        name
        updatedAt
        attrib {
          fullName
        }
      }
    }
  }
}
    `;
export const GetLatestProductVersionDocument = `
    query GetLatestProductVersion($projectName: String!, $productId: String!) {
  project(name: $projectName) {
    versions(latestOnly: true, productIds: [$productId]) {
      edges {
        node {
          id
          name
          version
          productId
          createdAt
          updatedAt
          status
          active
        }
      }
    }
  }
}
    `;
export const GetInboxHasUnreadDocument = `
    query GetInboxHasUnread {
  inbox(
    last: 1
    showActiveMessages: true
    showImportantMessages: true
    showUnreadMessages: true
  ) {
    edges {
      node {
        referenceId
        read
      }
    }
  }
}
    `;
export const GetInboxMessagesDocument = `
    query GetInboxMessages($last: Int, $active: Boolean, $important: Boolean, $cursor: String) {
  inbox(
    last: $last
    showActiveMessages: $active
    showImportantMessages: $important
    before: $cursor
  ) {
    pageInfo {
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        ...MessageFragment
      }
    }
  }
}
    ${MessageFragmentFragmentDoc}`;
export const GetInboxUnreadCountDocument = `
    query GetInboxUnreadCount($important: Boolean) {
  inbox(
    last: 500
    showActiveMessages: true
    showImportantMessages: $important
    showUnreadMessages: true
  ) {
    edges {
      node {
        referenceId
        read
      }
    }
  }
}
    `;
export const GetMarketInstallEventsDocument = `
    query GetMarketInstallEvents {
  events(last: 100, topics: ["addon.install_from_url"]) {
    edges {
      node {
        id
        status
        description
        summary
      }
    }
  }
}
    `;
export const GetInstallEventsDocument = `
    query GetInstallEvents($ids: [String!]!) {
  events(last: 100, ids: $ids) {
    edges {
      node {
        id
        status
        description
      }
    }
  }
}
    `;
export const GetProgressTaskDocument = `
    query GetProgressTask($projectName: String!, $taskId: String!) {
  project(name: $projectName) {
    name
    task(id: $taskId) {
      ...ProgressTaskFragment
    }
  }
}
    ${ProgressTaskFragmentFragmentDoc}`;
export const GetTasksProgressDocument = `
    query GetTasksProgress($projectName: String!, $folderIds: [String!], $assignees: [String!], $assigneesAny: [String!], $tags: [String!], $tagsAny: [String!], $statuses: [String!], $taskTypes: [String!], $attributes: [AttributeFilterInput!]) {
  project(name: $projectName) {
    name
    tasks(
      folderIds: $folderIds
      last: 1000
      includeFolderChildren: true
      assignees: $assignees
      assigneesAny: $assigneesAny
      tags: $tags
      tagsAny: $tagsAny
      statuses: $statuses
      taskTypes: $taskTypes
      attributes: $attributes
    ) {
      edges {
        node {
          ...ProgressTaskFragment
        }
      }
    }
  }
}
    ${ProgressTaskFragmentFragmentDoc}`;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    GetActivitiesById: build.query<GetActivitiesByIdQuery, GetActivitiesByIdQueryVariables>({
      query: (variables) => ({ document: GetActivitiesByIdDocument, variables })
    }),
    GetActivityUsers: build.query<GetActivityUsersQuery, GetActivityUsersQueryVariables | void>({
      query: (variables) => ({ document: GetActivityUsersDocument, variables })
    }),
    GetActivities: build.query<GetActivitiesQuery, GetActivitiesQueryVariables>({
      query: (variables) => ({ document: GetActivitiesDocument, variables })
    }),
    GetEntitiesChecklists: build.query<GetEntitiesChecklistsQuery, GetEntitiesChecklistsQueryVariables>({
      query: (variables) => ({ document: GetEntitiesChecklistsDocument, variables })
    }),
    GetDetailsPanelFolder: build.query<GetDetailsPanelFolderQuery, GetDetailsPanelFolderQueryVariables>({
      query: (variables) => ({ document: GetDetailsPanelFolderDocument, variables })
    }),
    GetDetailsPanelRepresentation: build.query<GetDetailsPanelRepresentationQuery, GetDetailsPanelRepresentationQueryVariables>({
      query: (variables) => ({ document: GetDetailsPanelRepresentationDocument, variables })
    }),
    GetDetailsPanelTask: build.query<GetDetailsPanelTaskQuery, GetDetailsPanelTaskQueryVariables>({
      query: (variables) => ({ document: GetDetailsPanelTaskDocument, variables })
    }),
    GetDetailsPanelVersion: build.query<GetDetailsPanelVersionQuery, GetDetailsPanelVersionQueryVariables>({
      query: (variables) => ({ document: GetDetailsPanelVersionDocument, variables })
    }),
    GetProductVersions: build.query<GetProductVersionsQuery, GetProductVersionsQueryVariables>({
      query: (variables) => ({ document: GetProductVersionsDocument, variables })
    }),
    GetListItems: build.query<GetListItemsQuery, GetListItemsQueryVariables>({
      query: (variables) => ({ document: GetListItemsDocument, variables })
    }),
    GetLists: build.query<GetListsQuery, GetListsQueryVariables>({
      query: (variables) => ({ document: GetListsDocument, variables })
    }),
    GetListsItemsForReviewSession: build.query<GetListsItemsForReviewSessionQuery, GetListsItemsForReviewSessionQueryVariables>({
      query: (variables) => ({ document: GetListsItemsForReviewSessionDocument, variables })
    }),
    GetTasksByParent: build.query<GetTasksByParentQuery, GetTasksByParentQueryVariables>({
      query: (variables) => ({ document: GetTasksByParentDocument, variables })
    }),
    GetTasksList: build.query<GetTasksListQuery, GetTasksListQueryVariables>({
      query: (variables) => ({ document: GetTasksListDocument, variables })
    }),
    GetProjectLatest: build.query<GetProjectLatestQuery, GetProjectLatestQueryVariables>({
      query: (variables) => ({ document: GetProjectLatestDocument, variables })
    }),
    GetKanban: build.query<GetKanbanQuery, GetKanbanQueryVariables | void>({
      query: (variables) => ({ document: GetKanbanDocument, variables })
    }),
    GetKanbanProjectUsers: build.query<GetKanbanProjectUsersQuery, GetKanbanProjectUsersQueryVariables | void>({
      query: (variables) => ({ document: GetKanbanProjectUsersDocument, variables })
    }),
    GetKanbanTasks: build.query<GetKanbanTasksQuery, GetKanbanTasksQueryVariables | void>({
      query: (variables) => ({ document: GetKanbanTasksDocument, variables })
    }),
    GetActiveUsersCount: build.query<GetActiveUsersCountQuery, GetActiveUsersCountQueryVariables | void>({
      query: (variables) => ({ document: GetActiveUsersCountDocument, variables })
    }),
    GetAllAssignees: build.query<GetAllAssigneesQuery, GetAllAssigneesQueryVariables | void>({
      query: (variables) => ({ document: GetAllAssigneesDocument, variables })
    }),
    GetAllProjectUsersAsAssignee: build.query<GetAllProjectUsersAsAssigneeQuery, GetAllProjectUsersAsAssigneeQueryVariables | void>({
      query: (variables) => ({ document: GetAllProjectUsersAsAssigneeDocument, variables })
    }),
    GetLatestProductVersion: build.query<GetLatestProductVersionQuery, GetLatestProductVersionQueryVariables>({
      query: (variables) => ({ document: GetLatestProductVersionDocument, variables })
    }),
    GetInboxHasUnread: build.query<GetInboxHasUnreadQuery, GetInboxHasUnreadQueryVariables | void>({
      query: (variables) => ({ document: GetInboxHasUnreadDocument, variables })
    }),
    GetInboxMessages: build.query<GetInboxMessagesQuery, GetInboxMessagesQueryVariables | void>({
      query: (variables) => ({ document: GetInboxMessagesDocument, variables })
    }),
    GetInboxUnreadCount: build.query<GetInboxUnreadCountQuery, GetInboxUnreadCountQueryVariables | void>({
      query: (variables) => ({ document: GetInboxUnreadCountDocument, variables })
    }),
    GetMarketInstallEvents: build.query<GetMarketInstallEventsQuery, GetMarketInstallEventsQueryVariables | void>({
      query: (variables) => ({ document: GetMarketInstallEventsDocument, variables })
    }),
    GetInstallEvents: build.query<GetInstallEventsQuery, GetInstallEventsQueryVariables>({
      query: (variables) => ({ document: GetInstallEventsDocument, variables })
    }),
    GetProgressTask: build.query<GetProgressTaskQuery, GetProgressTaskQueryVariables>({
      query: (variables) => ({ document: GetProgressTaskDocument, variables })
    }),
    GetTasksProgress: build.query<GetTasksProgressQuery, GetTasksProgressQueryVariables>({
      query: (variables) => ({ document: GetTasksProgressDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };


