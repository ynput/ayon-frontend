import React, { useState, useEffect, useRef, useCallback } from 'react'
import styled from 'styled-components'
import { TableRow, useCellEditing } from '@shared/containers'
import { theme } from '@ynput/ayon-react-components'
import { upperFirst } from 'lodash'
import { TableMeta } from '@tanstack/react-table'
import { checkName } from '@shared/util'

const EditingContainer = styled.div`
  background: var(--md-sys-color-surface-container-lowest);
  border: 2px solid var(--md-sys-color-primary);
  padding: 8px;
  width: 350px;
  border-radius: 4px;
`

const InputLabel = styled.label`
  font-size: 12px;
  color: var(--md-sys-color-outline);
`

const StyledInput = styled.input`
  width: 100%;
  border: none;
  background-color: var(--md-sys-color-surface-container-lowest);
  color: var(--md-sys-color-on-surface);

  &:focus {
    outline: none;
  }

  &.system-name {
    ${theme.bodySmall}
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    //background-color: var(--md-sys-color-surface-container);
    color: var(--md-sys-color-outline);
  }
`
export type NameWidgetData = {
  name: string
  label: string
  meta: TableMeta<TableRow> | undefined
  entityRowId: string | undefined
  hasVersions: boolean | undefined
}

export interface InlineEditingWidgetProps {
  cellId: string
  entityType: string
  initialName?: string
  initialLabel?: string
  onClose?: () => void
  valueData?: NameWidgetData
  nameDisabled?: boolean | string
  labelDisabled?: boolean | string
}

export const RenameForm: React.FC<InlineEditingWidgetProps> = ({
  cellId,
  entityType,
  initialName,
  initialLabel = '',
  onClose,
  valueData,
  nameDisabled = false,
  labelDisabled = false,
}) => {
  const [label, setLabel] = useState(initialLabel)
  const [name, setName] = useState(initialName)
  const { setEditingCellId, updateEntities } = useCellEditing()
  const labelInputRef = useRef<HTMLInputElement>(null)
  const nameInputRef = useRef<HTMLInputElement>(null)

  const isNameAutoGenerated = name === checkName(label.replace(/ /g, '_')).toLowerCase()

  useEffect(() => {
    const timeout = setTimeout(() => {
      // Focus on the first enabled input
      if (!labelDisabled && labelInputRef.current) {
        labelInputRef.current.focus()
        labelInputRef.current.select()
      } else if (!nameDisabled && nameInputRef.current) {
        nameInputRef.current.focus()
        nameInputRef.current.select()
      }
    }, 0)
    return () => clearTimeout(timeout)
  }, [labelDisabled, nameDisabled])

  useEffect(() => {
    setLabel(initialLabel)
    setName(initialName)
  }, [initialLabel, initialName])

  const handleSave = useCallback(async () => {
    const hasChanges = name !== initialName || label !== initialLabel
    if (hasChanges) {
      setEditingCellId(null)
      onClose?.()

      try {
        const { meta, entityRowId } = valueData || {}

        // Use rowId prop as fallback if entityRowId is undefined

        if (name !== initialName && !nameDisabled) {
          const finalName = name?.trim() || checkName(label.trim().replace(/ /g, '_')).toLowerCase()
          // we must await to ensure we do not have server deadlock when multiple requests are made at the same time
          // HACK: we should ideally batch these updates in updateEntities function, but this is a quick fix
          await meta?.updateEntities?.({
            field: 'name',
            value: finalName,
            type: entityType as string,
            rowId: entityRowId as string,
          })
        }

        if (label !== initialLabel && !labelDisabled) {
          const finalLabel = label.trim()

          meta?.updateEntities?.({
            field: 'label',
            value: finalLabel,
            type: entityType as string,
            rowId: entityRowId as string,
          })
        }
      } catch (error) {
        console.error('Failed to update entity:', error)
      }
    } else {
      // No changes, just close
      setEditingCellId(null)
      onClose?.()
    }
  }, [
    label,
    name,
    initialName,
    initialLabel,
    valueData,
    setEditingCellId,
    onClose,
    nameDisabled,
    labelDisabled,
    updateEntities,
    entityType,
  ])

  const handleCancel = useCallback(() => {
    setEditingCellId(null)
    onClose?.()
  }, [setEditingCellId, onClose])

  const handleLabelChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const value = e.target.value
      setLabel(value)
      if (isNameAutoGenerated && !nameDisabled) {
        setName(checkName(value.replace(/ /g, '_')).toLowerCase())
      }
    },
    [isNameAutoGenerated, nameDisabled],
  )

  const handleNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/ /g, '_')
    setName(checkName(value).toLowerCase())
  }, [])

  const handleLabelKeyDown = useCallback(
    (e: React.KeyboardEvent<HTMLInputElement>) => {
      if (e.key === 'ArrowDown') {
        e.preventDefault()
        if (!nameDisabled && nameInputRef.current) {
          nameInputRef.current.focus()
          // Position cursor at the end of the name input
          const length = nameInputRef.current.value.length
          nameInputRef.current.setSelectionRange(length, length)
        }
      } else if (e.key === 'Enter') {
        e.preventDefault()
        handleSave()
      }
    },
    [handleSave, handleCancel, nameDisabled],
  )

  const handleNameKeyDown = useCallback(
    (e: React.KeyboardEvent<HTMLInputElement>) => {
      if (e.key === 'ArrowUp') {
        e.preventDefault()
        if (!labelDisabled && labelInputRef.current) {
          labelInputRef.current.focus()
          // Position cursor at the end of the label input
          const length = labelInputRef.current.value.length
          labelInputRef.current.setSelectionRange(length, length)
        }
      } else if (e.key === 'Enter') {
        // Ctrl+Enter or Cmd+Enter to save
        e.preventDefault()
        handleSave()
      }
    },
    [handleSave, handleCancel, labelDisabled],
  )

  const handleInputClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputDoubleClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputMouseDown = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputMouseUp = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  // Helper to determine disabled and tooltip
  const getDisabledAndTooltip = (disabledProp: boolean | string) => {
    if (typeof disabledProp === 'string') {
      return { disabled: true, tooltip: disabledProp }
    }
    return { disabled: !!disabledProp, tooltip: undefined }
  }

  const labelInputProps = getDisabledAndTooltip(labelDisabled)
  const nameInputProps = getDisabledAndTooltip(nameDisabled)

  return (
    <EditingContainer id={`editing-container-${cellId}`} onClick={(e) => e.stopPropagation()}>
      <StyledInput
        ref={labelInputRef}
        id={`${cellId}-label`}
        type="text"
        value={label}
        onChange={handleLabelChange}
        onKeyDown={handleLabelKeyDown}
        onClick={handleInputClick}
        onDoubleClick={handleInputDoubleClick}
        onMouseDown={handleInputMouseDown}
        onMouseUp={handleInputMouseUp}
        placeholder={`${upperFirst(entityType)} label...`}
        style={{ paddingBottom: '6px' }}
        autoComplete="off"
        disabled={labelInputProps.disabled}
        data-tooltip={labelInputProps.tooltip}
        data-tooltip-delay={100}
      />
      <InputLabel htmlFor={`${cellId}-name`}>Name</InputLabel>
      <StyledInput
        ref={nameInputRef}
        id={`${cellId}-name`}
        type="text"
        value={name}
        onChange={handleNameChange}
        onKeyDown={handleNameKeyDown}
        onClick={handleInputClick}
        onDoubleClick={handleInputDoubleClick}
        onMouseDown={handleInputMouseDown}
        onMouseUp={handleInputMouseUp}
        className="system-name"
        placeholder={`${entityType}_name`}
        autoComplete="off"
        disabled={nameInputProps.disabled}
        data-tooltip={nameInputProps.tooltip}
        data-tooltip-delay={100}
      />
    </EditingContainer>
  )
}
